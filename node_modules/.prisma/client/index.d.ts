
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model MemberInvitations
 * 
 */
export type MemberInvitations = $Result.DefaultSelection<Prisma.$MemberInvitationsPayload>
/**
 * Model UserProfileQuestions
 * 
 */
export type UserProfileQuestions = $Result.DefaultSelection<Prisma.$UserProfileQuestionsPayload>
/**
 * Model QuestionOptions
 * 
 */
export type QuestionOptions = $Result.DefaultSelection<Prisma.$QuestionOptionsPayload>
/**
 * Model UserProfileQuestionAnswers
 * 
 */
export type UserProfileQuestionAnswers = $Result.DefaultSelection<Prisma.$UserProfileQuestionAnswersPayload>
/**
 * Model SelectedAnswerOptions
 * 
 */
export type SelectedAnswerOptions = $Result.DefaultSelection<Prisma.$SelectedAnswerOptionsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const QuestionType: {
  text: 'text',
  select: 'select',
  radio: 'radio',
  checkbox: 'checkbox',
  button: 'button'
};

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType]


export const Roles: {
  business_owner: 'business_owner',
  employee: 'employee',
  admin: 'admin'
};

export type Roles = (typeof Roles)[keyof typeof Roles]


export const Status: {
  pending: 'pending',
  accepted: 'accepted',
  expired: 'expired',
  cancelled: 'cancelled'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type QuestionType = $Enums.QuestionType

export const QuestionType: typeof $Enums.QuestionType

export type Roles = $Enums.Roles

export const Roles: typeof $Enums.Roles

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.memberInvitations`: Exposes CRUD operations for the **MemberInvitations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MemberInvitations
    * const memberInvitations = await prisma.memberInvitations.findMany()
    * ```
    */
  get memberInvitations(): Prisma.MemberInvitationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProfileQuestions`: Exposes CRUD operations for the **UserProfileQuestions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfileQuestions
    * const userProfileQuestions = await prisma.userProfileQuestions.findMany()
    * ```
    */
  get userProfileQuestions(): Prisma.UserProfileQuestionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionOptions`: Exposes CRUD operations for the **QuestionOptions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionOptions
    * const questionOptions = await prisma.questionOptions.findMany()
    * ```
    */
  get questionOptions(): Prisma.QuestionOptionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProfileQuestionAnswers`: Exposes CRUD operations for the **UserProfileQuestionAnswers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfileQuestionAnswers
    * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.findMany()
    * ```
    */
  get userProfileQuestionAnswers(): Prisma.UserProfileQuestionAnswersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.selectedAnswerOptions`: Exposes CRUD operations for the **SelectedAnswerOptions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SelectedAnswerOptions
    * const selectedAnswerOptions = await prisma.selectedAnswerOptions.findMany()
    * ```
    */
  get selectedAnswerOptions(): Prisma.SelectedAnswerOptionsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    MemberInvitations: 'MemberInvitations',
    UserProfileQuestions: 'UserProfileQuestions',
    QuestionOptions: 'QuestionOptions',
    UserProfileQuestionAnswers: 'UserProfileQuestionAnswers',
    SelectedAnswerOptions: 'SelectedAnswerOptions'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "memberInvitations" | "userProfileQuestions" | "questionOptions" | "userProfileQuestionAnswers" | "selectedAnswerOptions"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      MemberInvitations: {
        payload: Prisma.$MemberInvitationsPayload<ExtArgs>
        fields: Prisma.MemberInvitationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberInvitationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberInvitationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>
          }
          findFirst: {
            args: Prisma.MemberInvitationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberInvitationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>
          }
          findMany: {
            args: Prisma.MemberInvitationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>[]
          }
          create: {
            args: Prisma.MemberInvitationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>
          }
          createMany: {
            args: Prisma.MemberInvitationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberInvitationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>[]
          }
          delete: {
            args: Prisma.MemberInvitationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>
          }
          update: {
            args: Prisma.MemberInvitationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>
          }
          deleteMany: {
            args: Prisma.MemberInvitationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberInvitationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MemberInvitationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>[]
          }
          upsert: {
            args: Prisma.MemberInvitationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberInvitationsPayload>
          }
          aggregate: {
            args: Prisma.MemberInvitationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMemberInvitations>
          }
          groupBy: {
            args: Prisma.MemberInvitationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberInvitationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberInvitationsCountArgs<ExtArgs>
            result: $Utils.Optional<MemberInvitationsCountAggregateOutputType> | number
          }
        }
      }
      UserProfileQuestions: {
        payload: Prisma.$UserProfileQuestionsPayload<ExtArgs>
        fields: Prisma.UserProfileQuestionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileQuestionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileQuestionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>
          }
          findFirst: {
            args: Prisma.UserProfileQuestionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileQuestionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>
          }
          findMany: {
            args: Prisma.UserProfileQuestionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>[]
          }
          create: {
            args: Prisma.UserProfileQuestionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>
          }
          createMany: {
            args: Prisma.UserProfileQuestionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileQuestionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>[]
          }
          delete: {
            args: Prisma.UserProfileQuestionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>
          }
          update: {
            args: Prisma.UserProfileQuestionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>
          }
          deleteMany: {
            args: Prisma.UserProfileQuestionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileQuestionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProfileQuestionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>[]
          }
          upsert: {
            args: Prisma.UserProfileQuestionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionsPayload>
          }
          aggregate: {
            args: Prisma.UserProfileQuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfileQuestions>
          }
          groupBy: {
            args: Prisma.UserProfileQuestionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileQuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileQuestionsCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileQuestionsCountAggregateOutputType> | number
          }
        }
      }
      QuestionOptions: {
        payload: Prisma.$QuestionOptionsPayload<ExtArgs>
        fields: Prisma.QuestionOptionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionOptionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionOptionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>
          }
          findFirst: {
            args: Prisma.QuestionOptionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionOptionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>
          }
          findMany: {
            args: Prisma.QuestionOptionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>[]
          }
          create: {
            args: Prisma.QuestionOptionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>
          }
          createMany: {
            args: Prisma.QuestionOptionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionOptionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>[]
          }
          delete: {
            args: Prisma.QuestionOptionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>
          }
          update: {
            args: Prisma.QuestionOptionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>
          }
          deleteMany: {
            args: Prisma.QuestionOptionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionOptionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionOptionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>[]
          }
          upsert: {
            args: Prisma.QuestionOptionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionsPayload>
          }
          aggregate: {
            args: Prisma.QuestionOptionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionOptions>
          }
          groupBy: {
            args: Prisma.QuestionOptionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionOptionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionOptionsCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionOptionsCountAggregateOutputType> | number
          }
        }
      }
      UserProfileQuestionAnswers: {
        payload: Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>
        fields: Prisma.UserProfileQuestionAnswersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileQuestionAnswersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileQuestionAnswersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>
          }
          findFirst: {
            args: Prisma.UserProfileQuestionAnswersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileQuestionAnswersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>
          }
          findMany: {
            args: Prisma.UserProfileQuestionAnswersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>[]
          }
          create: {
            args: Prisma.UserProfileQuestionAnswersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>
          }
          createMany: {
            args: Prisma.UserProfileQuestionAnswersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileQuestionAnswersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>[]
          }
          delete: {
            args: Prisma.UserProfileQuestionAnswersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>
          }
          update: {
            args: Prisma.UserProfileQuestionAnswersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>
          }
          deleteMany: {
            args: Prisma.UserProfileQuestionAnswersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileQuestionAnswersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProfileQuestionAnswersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>[]
          }
          upsert: {
            args: Prisma.UserProfileQuestionAnswersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfileQuestionAnswersPayload>
          }
          aggregate: {
            args: Prisma.UserProfileQuestionAnswersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfileQuestionAnswers>
          }
          groupBy: {
            args: Prisma.UserProfileQuestionAnswersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileQuestionAnswersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileQuestionAnswersCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileQuestionAnswersCountAggregateOutputType> | number
          }
        }
      }
      SelectedAnswerOptions: {
        payload: Prisma.$SelectedAnswerOptionsPayload<ExtArgs>
        fields: Prisma.SelectedAnswerOptionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SelectedAnswerOptionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SelectedAnswerOptionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>
          }
          findFirst: {
            args: Prisma.SelectedAnswerOptionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SelectedAnswerOptionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>
          }
          findMany: {
            args: Prisma.SelectedAnswerOptionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>[]
          }
          create: {
            args: Prisma.SelectedAnswerOptionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>
          }
          createMany: {
            args: Prisma.SelectedAnswerOptionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SelectedAnswerOptionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>[]
          }
          delete: {
            args: Prisma.SelectedAnswerOptionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>
          }
          update: {
            args: Prisma.SelectedAnswerOptionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>
          }
          deleteMany: {
            args: Prisma.SelectedAnswerOptionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SelectedAnswerOptionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SelectedAnswerOptionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>[]
          }
          upsert: {
            args: Prisma.SelectedAnswerOptionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SelectedAnswerOptionsPayload>
          }
          aggregate: {
            args: Prisma.SelectedAnswerOptionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSelectedAnswerOptions>
          }
          groupBy: {
            args: Prisma.SelectedAnswerOptionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SelectedAnswerOptionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SelectedAnswerOptionsCountArgs<ExtArgs>
            result: $Utils.Optional<SelectedAnswerOptionsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    memberInvitations?: MemberInvitationsOmit
    userProfileQuestions?: UserProfileQuestionsOmit
    questionOptions?: QuestionOptionsOmit
    userProfileQuestionAnswers?: UserProfileQuestionAnswersOmit
    selectedAnswerOptions?: SelectedAnswerOptionsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    MemberInvitations: number
    UserProfileQuestionAnswers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MemberInvitations?: boolean | UserCountOutputTypeCountMemberInvitationsArgs
    UserProfileQuestionAnswers?: boolean | UserCountOutputTypeCountUserProfileQuestionAnswersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMemberInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberInvitationsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserProfileQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileQuestionAnswersWhereInput
  }


  /**
   * Count Type UserProfileQuestionsCountOutputType
   */

  export type UserProfileQuestionsCountOutputType = {
    options: number
    answer: number
  }

  export type UserProfileQuestionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | UserProfileQuestionsCountOutputTypeCountOptionsArgs
    answer?: boolean | UserProfileQuestionsCountOutputTypeCountAnswerArgs
  }

  // Custom InputTypes
  /**
   * UserProfileQuestionsCountOutputType without action
   */
  export type UserProfileQuestionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionsCountOutputType
     */
    select?: UserProfileQuestionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserProfileQuestionsCountOutputType without action
   */
  export type UserProfileQuestionsCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionsWhereInput
  }

  /**
   * UserProfileQuestionsCountOutputType without action
   */
  export type UserProfileQuestionsCountOutputTypeCountAnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileQuestionAnswersWhereInput
  }


  /**
   * Count Type UserProfileQuestionAnswersCountOutputType
   */

  export type UserProfileQuestionAnswersCountOutputType = {
    answer_options: number
  }

  export type UserProfileQuestionAnswersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answer_options?: boolean | UserProfileQuestionAnswersCountOutputTypeCountAnswer_optionsArgs
  }

  // Custom InputTypes
  /**
   * UserProfileQuestionAnswersCountOutputType without action
   */
  export type UserProfileQuestionAnswersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswersCountOutputType
     */
    select?: UserProfileQuestionAnswersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserProfileQuestionAnswersCountOutputType without action
   */
  export type UserProfileQuestionAnswersCountOutputTypeCountAnswer_optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SelectedAnswerOptionsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    position: string | null
    first_name: string | null
    last_name: string | null
    role: $Enums.Roles | null
    is_email_verified: boolean | null
    company: string | null
    location: string | null
    birth_date: Date | null
    phone_number: string | null
    skype: string | null
    email: string | null
    username: string | null
    password: string | null
    fileName: string | null
    level: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    position: string | null
    first_name: string | null
    last_name: string | null
    role: $Enums.Roles | null
    is_email_verified: boolean | null
    company: string | null
    location: string | null
    birth_date: Date | null
    phone_number: string | null
    skype: string | null
    email: string | null
    username: string | null
    password: string | null
    fileName: string | null
    level: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    position: number
    first_name: number
    last_name: number
    role: number
    is_email_verified: number
    company: number
    location: number
    birth_date: number
    phone_number: number
    skype: number
    email: number
    username: number
    password: number
    fileName: number
    level: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    position?: true
    first_name?: true
    last_name?: true
    role?: true
    is_email_verified?: true
    company?: true
    location?: true
    birth_date?: true
    phone_number?: true
    skype?: true
    email?: true
    username?: true
    password?: true
    fileName?: true
    level?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    position?: true
    first_name?: true
    last_name?: true
    role?: true
    is_email_verified?: true
    company?: true
    location?: true
    birth_date?: true
    phone_number?: true
    skype?: true
    email?: true
    username?: true
    password?: true
    fileName?: true
    level?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    position?: true
    first_name?: true
    last_name?: true
    role?: true
    is_email_verified?: true
    company?: true
    location?: true
    birth_date?: true
    phone_number?: true
    skype?: true
    email?: true
    username?: true
    password?: true
    fileName?: true
    level?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    position: string | null
    first_name: string | null
    last_name: string | null
    role: $Enums.Roles
    is_email_verified: boolean
    company: string | null
    location: string | null
    birth_date: Date | null
    phone_number: string | null
    skype: string | null
    email: string | null
    username: string | null
    password: string
    fileName: string | null
    level: string | null
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    position?: boolean
    first_name?: boolean
    last_name?: boolean
    role?: boolean
    is_email_verified?: boolean
    company?: boolean
    location?: boolean
    birth_date?: boolean
    phone_number?: boolean
    skype?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    fileName?: boolean
    level?: boolean
    created_at?: boolean
    updated_at?: boolean
    MemberInvitations?: boolean | User$MemberInvitationsArgs<ExtArgs>
    UserProfileQuestionAnswers?: boolean | User$UserProfileQuestionAnswersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    position?: boolean
    first_name?: boolean
    last_name?: boolean
    role?: boolean
    is_email_verified?: boolean
    company?: boolean
    location?: boolean
    birth_date?: boolean
    phone_number?: boolean
    skype?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    fileName?: boolean
    level?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    position?: boolean
    first_name?: boolean
    last_name?: boolean
    role?: boolean
    is_email_verified?: boolean
    company?: boolean
    location?: boolean
    birth_date?: boolean
    phone_number?: boolean
    skype?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    fileName?: boolean
    level?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    position?: boolean
    first_name?: boolean
    last_name?: boolean
    role?: boolean
    is_email_verified?: boolean
    company?: boolean
    location?: boolean
    birth_date?: boolean
    phone_number?: boolean
    skype?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    fileName?: boolean
    level?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "position" | "first_name" | "last_name" | "role" | "is_email_verified" | "company" | "location" | "birth_date" | "phone_number" | "skype" | "email" | "username" | "password" | "fileName" | "level" | "created_at" | "updated_at", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MemberInvitations?: boolean | User$MemberInvitationsArgs<ExtArgs>
    UserProfileQuestionAnswers?: boolean | User$UserProfileQuestionAnswersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      MemberInvitations: Prisma.$MemberInvitationsPayload<ExtArgs>[]
      UserProfileQuestionAnswers: Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      position: string | null
      first_name: string | null
      last_name: string | null
      role: $Enums.Roles
      is_email_verified: boolean
      company: string | null
      location: string | null
      birth_date: Date | null
      phone_number: string | null
      skype: string | null
      email: string | null
      username: string | null
      password: string
      fileName: string | null
      level: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MemberInvitations<T extends User$MemberInvitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$MemberInvitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UserProfileQuestionAnswers<T extends User$UserProfileQuestionAnswersArgs<ExtArgs> = {}>(args?: Subset<T, User$UserProfileQuestionAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly position: FieldRef<"User", 'String'>
    readonly first_name: FieldRef<"User", 'String'>
    readonly last_name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Roles'>
    readonly is_email_verified: FieldRef<"User", 'Boolean'>
    readonly company: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly birth_date: FieldRef<"User", 'DateTime'>
    readonly phone_number: FieldRef<"User", 'String'>
    readonly skype: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly fileName: FieldRef<"User", 'String'>
    readonly level: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.MemberInvitations
   */
  export type User$MemberInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    where?: MemberInvitationsWhereInput
    orderBy?: MemberInvitationsOrderByWithRelationInput | MemberInvitationsOrderByWithRelationInput[]
    cursor?: MemberInvitationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberInvitationsScalarFieldEnum | MemberInvitationsScalarFieldEnum[]
  }

  /**
   * User.UserProfileQuestionAnswers
   */
  export type User$UserProfileQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    where?: UserProfileQuestionAnswersWhereInput
    orderBy?: UserProfileQuestionAnswersOrderByWithRelationInput | UserProfileQuestionAnswersOrderByWithRelationInput[]
    cursor?: UserProfileQuestionAnswersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProfileQuestionAnswersScalarFieldEnum | UserProfileQuestionAnswersScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model MemberInvitations
   */

  export type AggregateMemberInvitations = {
    _count: MemberInvitationsCountAggregateOutputType | null
    _min: MemberInvitationsMinAggregateOutputType | null
    _max: MemberInvitationsMaxAggregateOutputType | null
  }

  export type MemberInvitationsMinAggregateOutputType = {
    id: string | null
    email: string | null
    invited_by_user_id: string | null
    invitation_token: string | null
    status: $Enums.Status | null
    expires_at: Date | null
    sent_at: Date | null
    accepted_at: Date | null
  }

  export type MemberInvitationsMaxAggregateOutputType = {
    id: string | null
    email: string | null
    invited_by_user_id: string | null
    invitation_token: string | null
    status: $Enums.Status | null
    expires_at: Date | null
    sent_at: Date | null
    accepted_at: Date | null
  }

  export type MemberInvitationsCountAggregateOutputType = {
    id: number
    email: number
    invited_by_user_id: number
    invitation_token: number
    status: number
    expires_at: number
    sent_at: number
    accepted_at: number
    _all: number
  }


  export type MemberInvitationsMinAggregateInputType = {
    id?: true
    email?: true
    invited_by_user_id?: true
    invitation_token?: true
    status?: true
    expires_at?: true
    sent_at?: true
    accepted_at?: true
  }

  export type MemberInvitationsMaxAggregateInputType = {
    id?: true
    email?: true
    invited_by_user_id?: true
    invitation_token?: true
    status?: true
    expires_at?: true
    sent_at?: true
    accepted_at?: true
  }

  export type MemberInvitationsCountAggregateInputType = {
    id?: true
    email?: true
    invited_by_user_id?: true
    invitation_token?: true
    status?: true
    expires_at?: true
    sent_at?: true
    accepted_at?: true
    _all?: true
  }

  export type MemberInvitationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemberInvitations to aggregate.
     */
    where?: MemberInvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberInvitations to fetch.
     */
    orderBy?: MemberInvitationsOrderByWithRelationInput | MemberInvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberInvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MemberInvitations
    **/
    _count?: true | MemberInvitationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberInvitationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberInvitationsMaxAggregateInputType
  }

  export type GetMemberInvitationsAggregateType<T extends MemberInvitationsAggregateArgs> = {
        [P in keyof T & keyof AggregateMemberInvitations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMemberInvitations[P]>
      : GetScalarType<T[P], AggregateMemberInvitations[P]>
  }




  export type MemberInvitationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberInvitationsWhereInput
    orderBy?: MemberInvitationsOrderByWithAggregationInput | MemberInvitationsOrderByWithAggregationInput[]
    by: MemberInvitationsScalarFieldEnum[] | MemberInvitationsScalarFieldEnum
    having?: MemberInvitationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberInvitationsCountAggregateInputType | true
    _min?: MemberInvitationsMinAggregateInputType
    _max?: MemberInvitationsMaxAggregateInputType
  }

  export type MemberInvitationsGroupByOutputType = {
    id: string
    email: string
    invited_by_user_id: string
    invitation_token: string
    status: $Enums.Status
    expires_at: Date
    sent_at: Date
    accepted_at: Date | null
    _count: MemberInvitationsCountAggregateOutputType | null
    _min: MemberInvitationsMinAggregateOutputType | null
    _max: MemberInvitationsMaxAggregateOutputType | null
  }

  type GetMemberInvitationsGroupByPayload<T extends MemberInvitationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberInvitationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberInvitationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberInvitationsGroupByOutputType[P]>
            : GetScalarType<T[P], MemberInvitationsGroupByOutputType[P]>
        }
      >
    >


  export type MemberInvitationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    invited_by_user_id?: boolean
    invitation_token?: boolean
    status?: boolean
    expires_at?: boolean
    sent_at?: boolean
    accepted_at?: boolean
    Users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memberInvitations"]>

  export type MemberInvitationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    invited_by_user_id?: boolean
    invitation_token?: boolean
    status?: boolean
    expires_at?: boolean
    sent_at?: boolean
    accepted_at?: boolean
    Users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memberInvitations"]>

  export type MemberInvitationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    invited_by_user_id?: boolean
    invitation_token?: boolean
    status?: boolean
    expires_at?: boolean
    sent_at?: boolean
    accepted_at?: boolean
    Users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memberInvitations"]>

  export type MemberInvitationsSelectScalar = {
    id?: boolean
    email?: boolean
    invited_by_user_id?: boolean
    invitation_token?: boolean
    status?: boolean
    expires_at?: boolean
    sent_at?: boolean
    accepted_at?: boolean
  }

  export type MemberInvitationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "invited_by_user_id" | "invitation_token" | "status" | "expires_at" | "sent_at" | "accepted_at", ExtArgs["result"]["memberInvitations"]>
  export type MemberInvitationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MemberInvitationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MemberInvitationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MemberInvitationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MemberInvitations"
    objects: {
      Users: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      invited_by_user_id: string
      invitation_token: string
      status: $Enums.Status
      expires_at: Date
      sent_at: Date
      accepted_at: Date | null
    }, ExtArgs["result"]["memberInvitations"]>
    composites: {}
  }

  type MemberInvitationsGetPayload<S extends boolean | null | undefined | MemberInvitationsDefaultArgs> = $Result.GetResult<Prisma.$MemberInvitationsPayload, S>

  type MemberInvitationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MemberInvitationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MemberInvitationsCountAggregateInputType | true
    }

  export interface MemberInvitationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MemberInvitations'], meta: { name: 'MemberInvitations' } }
    /**
     * Find zero or one MemberInvitations that matches the filter.
     * @param {MemberInvitationsFindUniqueArgs} args - Arguments to find a MemberInvitations
     * @example
     * // Get one MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberInvitationsFindUniqueArgs>(args: SelectSubset<T, MemberInvitationsFindUniqueArgs<ExtArgs>>): Prisma__MemberInvitationsClient<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MemberInvitations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MemberInvitationsFindUniqueOrThrowArgs} args - Arguments to find a MemberInvitations
     * @example
     * // Get one MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberInvitationsFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberInvitationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberInvitationsClient<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MemberInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInvitationsFindFirstArgs} args - Arguments to find a MemberInvitations
     * @example
     * // Get one MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberInvitationsFindFirstArgs>(args?: SelectSubset<T, MemberInvitationsFindFirstArgs<ExtArgs>>): Prisma__MemberInvitationsClient<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MemberInvitations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInvitationsFindFirstOrThrowArgs} args - Arguments to find a MemberInvitations
     * @example
     * // Get one MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberInvitationsFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberInvitationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberInvitationsClient<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MemberInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInvitationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.findMany()
     * 
     * // Get first 10 MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberInvitationsWithIdOnly = await prisma.memberInvitations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberInvitationsFindManyArgs>(args?: SelectSubset<T, MemberInvitationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MemberInvitations.
     * @param {MemberInvitationsCreateArgs} args - Arguments to create a MemberInvitations.
     * @example
     * // Create one MemberInvitations
     * const MemberInvitations = await prisma.memberInvitations.create({
     *   data: {
     *     // ... data to create a MemberInvitations
     *   }
     * })
     * 
     */
    create<T extends MemberInvitationsCreateArgs>(args: SelectSubset<T, MemberInvitationsCreateArgs<ExtArgs>>): Prisma__MemberInvitationsClient<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MemberInvitations.
     * @param {MemberInvitationsCreateManyArgs} args - Arguments to create many MemberInvitations.
     * @example
     * // Create many MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberInvitationsCreateManyArgs>(args?: SelectSubset<T, MemberInvitationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MemberInvitations and returns the data saved in the database.
     * @param {MemberInvitationsCreateManyAndReturnArgs} args - Arguments to create many MemberInvitations.
     * @example
     * // Create many MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MemberInvitations and only return the `id`
     * const memberInvitationsWithIdOnly = await prisma.memberInvitations.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberInvitationsCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberInvitationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MemberInvitations.
     * @param {MemberInvitationsDeleteArgs} args - Arguments to delete one MemberInvitations.
     * @example
     * // Delete one MemberInvitations
     * const MemberInvitations = await prisma.memberInvitations.delete({
     *   where: {
     *     // ... filter to delete one MemberInvitations
     *   }
     * })
     * 
     */
    delete<T extends MemberInvitationsDeleteArgs>(args: SelectSubset<T, MemberInvitationsDeleteArgs<ExtArgs>>): Prisma__MemberInvitationsClient<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MemberInvitations.
     * @param {MemberInvitationsUpdateArgs} args - Arguments to update one MemberInvitations.
     * @example
     * // Update one MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberInvitationsUpdateArgs>(args: SelectSubset<T, MemberInvitationsUpdateArgs<ExtArgs>>): Prisma__MemberInvitationsClient<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MemberInvitations.
     * @param {MemberInvitationsDeleteManyArgs} args - Arguments to filter MemberInvitations to delete.
     * @example
     * // Delete a few MemberInvitations
     * const { count } = await prisma.memberInvitations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberInvitationsDeleteManyArgs>(args?: SelectSubset<T, MemberInvitationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MemberInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInvitationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberInvitationsUpdateManyArgs>(args: SelectSubset<T, MemberInvitationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MemberInvitations and returns the data updated in the database.
     * @param {MemberInvitationsUpdateManyAndReturnArgs} args - Arguments to update many MemberInvitations.
     * @example
     * // Update many MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MemberInvitations and only return the `id`
     * const memberInvitationsWithIdOnly = await prisma.memberInvitations.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MemberInvitationsUpdateManyAndReturnArgs>(args: SelectSubset<T, MemberInvitationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MemberInvitations.
     * @param {MemberInvitationsUpsertArgs} args - Arguments to update or create a MemberInvitations.
     * @example
     * // Update or create a MemberInvitations
     * const memberInvitations = await prisma.memberInvitations.upsert({
     *   create: {
     *     // ... data to create a MemberInvitations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MemberInvitations we want to update
     *   }
     * })
     */
    upsert<T extends MemberInvitationsUpsertArgs>(args: SelectSubset<T, MemberInvitationsUpsertArgs<ExtArgs>>): Prisma__MemberInvitationsClient<$Result.GetResult<Prisma.$MemberInvitationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MemberInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInvitationsCountArgs} args - Arguments to filter MemberInvitations to count.
     * @example
     * // Count the number of MemberInvitations
     * const count = await prisma.memberInvitations.count({
     *   where: {
     *     // ... the filter for the MemberInvitations we want to count
     *   }
     * })
    **/
    count<T extends MemberInvitationsCountArgs>(
      args?: Subset<T, MemberInvitationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberInvitationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MemberInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInvitationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberInvitationsAggregateArgs>(args: Subset<T, MemberInvitationsAggregateArgs>): Prisma.PrismaPromise<GetMemberInvitationsAggregateType<T>>

    /**
     * Group by MemberInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInvitationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberInvitationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberInvitationsGroupByArgs['orderBy'] }
        : { orderBy?: MemberInvitationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberInvitationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberInvitationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MemberInvitations model
   */
  readonly fields: MemberInvitationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MemberInvitations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberInvitationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MemberInvitations model
   */
  interface MemberInvitationsFieldRefs {
    readonly id: FieldRef<"MemberInvitations", 'String'>
    readonly email: FieldRef<"MemberInvitations", 'String'>
    readonly invited_by_user_id: FieldRef<"MemberInvitations", 'String'>
    readonly invitation_token: FieldRef<"MemberInvitations", 'String'>
    readonly status: FieldRef<"MemberInvitations", 'Status'>
    readonly expires_at: FieldRef<"MemberInvitations", 'DateTime'>
    readonly sent_at: FieldRef<"MemberInvitations", 'DateTime'>
    readonly accepted_at: FieldRef<"MemberInvitations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MemberInvitations findUnique
   */
  export type MemberInvitationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which MemberInvitations to fetch.
     */
    where: MemberInvitationsWhereUniqueInput
  }

  /**
   * MemberInvitations findUniqueOrThrow
   */
  export type MemberInvitationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which MemberInvitations to fetch.
     */
    where: MemberInvitationsWhereUniqueInput
  }

  /**
   * MemberInvitations findFirst
   */
  export type MemberInvitationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which MemberInvitations to fetch.
     */
    where?: MemberInvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberInvitations to fetch.
     */
    orderBy?: MemberInvitationsOrderByWithRelationInput | MemberInvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberInvitations.
     */
    cursor?: MemberInvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberInvitations.
     */
    distinct?: MemberInvitationsScalarFieldEnum | MemberInvitationsScalarFieldEnum[]
  }

  /**
   * MemberInvitations findFirstOrThrow
   */
  export type MemberInvitationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which MemberInvitations to fetch.
     */
    where?: MemberInvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberInvitations to fetch.
     */
    orderBy?: MemberInvitationsOrderByWithRelationInput | MemberInvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberInvitations.
     */
    cursor?: MemberInvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberInvitations.
     */
    distinct?: MemberInvitationsScalarFieldEnum | MemberInvitationsScalarFieldEnum[]
  }

  /**
   * MemberInvitations findMany
   */
  export type MemberInvitationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * Filter, which MemberInvitations to fetch.
     */
    where?: MemberInvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberInvitations to fetch.
     */
    orderBy?: MemberInvitationsOrderByWithRelationInput | MemberInvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MemberInvitations.
     */
    cursor?: MemberInvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberInvitations.
     */
    skip?: number
    distinct?: MemberInvitationsScalarFieldEnum | MemberInvitationsScalarFieldEnum[]
  }

  /**
   * MemberInvitations create
   */
  export type MemberInvitationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * The data needed to create a MemberInvitations.
     */
    data: XOR<MemberInvitationsCreateInput, MemberInvitationsUncheckedCreateInput>
  }

  /**
   * MemberInvitations createMany
   */
  export type MemberInvitationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MemberInvitations.
     */
    data: MemberInvitationsCreateManyInput | MemberInvitationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MemberInvitations createManyAndReturn
   */
  export type MemberInvitationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * The data used to create many MemberInvitations.
     */
    data: MemberInvitationsCreateManyInput | MemberInvitationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MemberInvitations update
   */
  export type MemberInvitationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * The data needed to update a MemberInvitations.
     */
    data: XOR<MemberInvitationsUpdateInput, MemberInvitationsUncheckedUpdateInput>
    /**
     * Choose, which MemberInvitations to update.
     */
    where: MemberInvitationsWhereUniqueInput
  }

  /**
   * MemberInvitations updateMany
   */
  export type MemberInvitationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MemberInvitations.
     */
    data: XOR<MemberInvitationsUpdateManyMutationInput, MemberInvitationsUncheckedUpdateManyInput>
    /**
     * Filter which MemberInvitations to update
     */
    where?: MemberInvitationsWhereInput
    /**
     * Limit how many MemberInvitations to update.
     */
    limit?: number
  }

  /**
   * MemberInvitations updateManyAndReturn
   */
  export type MemberInvitationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * The data used to update MemberInvitations.
     */
    data: XOR<MemberInvitationsUpdateManyMutationInput, MemberInvitationsUncheckedUpdateManyInput>
    /**
     * Filter which MemberInvitations to update
     */
    where?: MemberInvitationsWhereInput
    /**
     * Limit how many MemberInvitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MemberInvitations upsert
   */
  export type MemberInvitationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * The filter to search for the MemberInvitations to update in case it exists.
     */
    where: MemberInvitationsWhereUniqueInput
    /**
     * In case the MemberInvitations found by the `where` argument doesn't exist, create a new MemberInvitations with this data.
     */
    create: XOR<MemberInvitationsCreateInput, MemberInvitationsUncheckedCreateInput>
    /**
     * In case the MemberInvitations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberInvitationsUpdateInput, MemberInvitationsUncheckedUpdateInput>
  }

  /**
   * MemberInvitations delete
   */
  export type MemberInvitationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
    /**
     * Filter which MemberInvitations to delete.
     */
    where: MemberInvitationsWhereUniqueInput
  }

  /**
   * MemberInvitations deleteMany
   */
  export type MemberInvitationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MemberInvitations to delete
     */
    where?: MemberInvitationsWhereInput
    /**
     * Limit how many MemberInvitations to delete.
     */
    limit?: number
  }

  /**
   * MemberInvitations without action
   */
  export type MemberInvitationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberInvitations
     */
    select?: MemberInvitationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MemberInvitations
     */
    omit?: MemberInvitationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInvitationsInclude<ExtArgs> | null
  }


  /**
   * Model UserProfileQuestions
   */

  export type AggregateUserProfileQuestions = {
    _count: UserProfileQuestionsCountAggregateOutputType | null
    _avg: UserProfileQuestionsAvgAggregateOutputType | null
    _sum: UserProfileQuestionsSumAggregateOutputType | null
    _min: UserProfileQuestionsMinAggregateOutputType | null
    _max: UserProfileQuestionsMaxAggregateOutputType | null
  }

  export type UserProfileQuestionsAvgAggregateOutputType = {
    step_number: number | null
    order_number: number | null
  }

  export type UserProfileQuestionsSumAggregateOutputType = {
    step_number: number | null
    order_number: number | null
  }

  export type UserProfileQuestionsMinAggregateOutputType = {
    id: string | null
    question_text: string | null
    question_type: $Enums.QuestionType | null
    is_required: boolean | null
    step_number: number | null
    order_number: number | null
  }

  export type UserProfileQuestionsMaxAggregateOutputType = {
    id: string | null
    question_text: string | null
    question_type: $Enums.QuestionType | null
    is_required: boolean | null
    step_number: number | null
    order_number: number | null
  }

  export type UserProfileQuestionsCountAggregateOutputType = {
    id: number
    question_text: number
    question_type: number
    is_required: number
    step_number: number
    order_number: number
    _all: number
  }


  export type UserProfileQuestionsAvgAggregateInputType = {
    step_number?: true
    order_number?: true
  }

  export type UserProfileQuestionsSumAggregateInputType = {
    step_number?: true
    order_number?: true
  }

  export type UserProfileQuestionsMinAggregateInputType = {
    id?: true
    question_text?: true
    question_type?: true
    is_required?: true
    step_number?: true
    order_number?: true
  }

  export type UserProfileQuestionsMaxAggregateInputType = {
    id?: true
    question_text?: true
    question_type?: true
    is_required?: true
    step_number?: true
    order_number?: true
  }

  export type UserProfileQuestionsCountAggregateInputType = {
    id?: true
    question_text?: true
    question_type?: true
    is_required?: true
    step_number?: true
    order_number?: true
    _all?: true
  }

  export type UserProfileQuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfileQuestions to aggregate.
     */
    where?: UserProfileQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfileQuestions to fetch.
     */
    orderBy?: UserProfileQuestionsOrderByWithRelationInput | UserProfileQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfileQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfileQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfileQuestions
    **/
    _count?: true | UserProfileQuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileQuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileQuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileQuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileQuestionsMaxAggregateInputType
  }

  export type GetUserProfileQuestionsAggregateType<T extends UserProfileQuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfileQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfileQuestions[P]>
      : GetScalarType<T[P], AggregateUserProfileQuestions[P]>
  }




  export type UserProfileQuestionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileQuestionsWhereInput
    orderBy?: UserProfileQuestionsOrderByWithAggregationInput | UserProfileQuestionsOrderByWithAggregationInput[]
    by: UserProfileQuestionsScalarFieldEnum[] | UserProfileQuestionsScalarFieldEnum
    having?: UserProfileQuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileQuestionsCountAggregateInputType | true
    _avg?: UserProfileQuestionsAvgAggregateInputType
    _sum?: UserProfileQuestionsSumAggregateInputType
    _min?: UserProfileQuestionsMinAggregateInputType
    _max?: UserProfileQuestionsMaxAggregateInputType
  }

  export type UserProfileQuestionsGroupByOutputType = {
    id: string
    question_text: string
    question_type: $Enums.QuestionType
    is_required: boolean
    step_number: number
    order_number: number | null
    _count: UserProfileQuestionsCountAggregateOutputType | null
    _avg: UserProfileQuestionsAvgAggregateOutputType | null
    _sum: UserProfileQuestionsSumAggregateOutputType | null
    _min: UserProfileQuestionsMinAggregateOutputType | null
    _max: UserProfileQuestionsMaxAggregateOutputType | null
  }

  type GetUserProfileQuestionsGroupByPayload<T extends UserProfileQuestionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileQuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileQuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileQuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileQuestionsGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileQuestionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_text?: boolean
    question_type?: boolean
    is_required?: boolean
    step_number?: boolean
    order_number?: boolean
    options?: boolean | UserProfileQuestions$optionsArgs<ExtArgs>
    answer?: boolean | UserProfileQuestions$answerArgs<ExtArgs>
    _count?: boolean | UserProfileQuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfileQuestions"]>

  export type UserProfileQuestionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_text?: boolean
    question_type?: boolean
    is_required?: boolean
    step_number?: boolean
    order_number?: boolean
  }, ExtArgs["result"]["userProfileQuestions"]>

  export type UserProfileQuestionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_text?: boolean
    question_type?: boolean
    is_required?: boolean
    step_number?: boolean
    order_number?: boolean
  }, ExtArgs["result"]["userProfileQuestions"]>

  export type UserProfileQuestionsSelectScalar = {
    id?: boolean
    question_text?: boolean
    question_type?: boolean
    is_required?: boolean
    step_number?: boolean
    order_number?: boolean
  }

  export type UserProfileQuestionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question_text" | "question_type" | "is_required" | "step_number" | "order_number", ExtArgs["result"]["userProfileQuestions"]>
  export type UserProfileQuestionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | UserProfileQuestions$optionsArgs<ExtArgs>
    answer?: boolean | UserProfileQuestions$answerArgs<ExtArgs>
    _count?: boolean | UserProfileQuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserProfileQuestionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserProfileQuestionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserProfileQuestionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfileQuestions"
    objects: {
      options: Prisma.$QuestionOptionsPayload<ExtArgs>[]
      answer: Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question_text: string
      question_type: $Enums.QuestionType
      is_required: boolean
      step_number: number
      order_number: number | null
    }, ExtArgs["result"]["userProfileQuestions"]>
    composites: {}
  }

  type UserProfileQuestionsGetPayload<S extends boolean | null | undefined | UserProfileQuestionsDefaultArgs> = $Result.GetResult<Prisma.$UserProfileQuestionsPayload, S>

  type UserProfileQuestionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProfileQuestionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProfileQuestionsCountAggregateInputType | true
    }

  export interface UserProfileQuestionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfileQuestions'], meta: { name: 'UserProfileQuestions' } }
    /**
     * Find zero or one UserProfileQuestions that matches the filter.
     * @param {UserProfileQuestionsFindUniqueArgs} args - Arguments to find a UserProfileQuestions
     * @example
     * // Get one UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileQuestionsFindUniqueArgs>(args: SelectSubset<T, UserProfileQuestionsFindUniqueArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProfileQuestions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProfileQuestionsFindUniqueOrThrowArgs} args - Arguments to find a UserProfileQuestions
     * @example
     * // Get one UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileQuestionsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileQuestionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfileQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionsFindFirstArgs} args - Arguments to find a UserProfileQuestions
     * @example
     * // Get one UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileQuestionsFindFirstArgs>(args?: SelectSubset<T, UserProfileQuestionsFindFirstArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfileQuestions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionsFindFirstOrThrowArgs} args - Arguments to find a UserProfileQuestions
     * @example
     * // Get one UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileQuestionsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileQuestionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProfileQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.findMany()
     * 
     * // Get first 10 UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileQuestionsWithIdOnly = await prisma.userProfileQuestions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileQuestionsFindManyArgs>(args?: SelectSubset<T, UserProfileQuestionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProfileQuestions.
     * @param {UserProfileQuestionsCreateArgs} args - Arguments to create a UserProfileQuestions.
     * @example
     * // Create one UserProfileQuestions
     * const UserProfileQuestions = await prisma.userProfileQuestions.create({
     *   data: {
     *     // ... data to create a UserProfileQuestions
     *   }
     * })
     * 
     */
    create<T extends UserProfileQuestionsCreateArgs>(args: SelectSubset<T, UserProfileQuestionsCreateArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProfileQuestions.
     * @param {UserProfileQuestionsCreateManyArgs} args - Arguments to create many UserProfileQuestions.
     * @example
     * // Create many UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileQuestionsCreateManyArgs>(args?: SelectSubset<T, UserProfileQuestionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfileQuestions and returns the data saved in the database.
     * @param {UserProfileQuestionsCreateManyAndReturnArgs} args - Arguments to create many UserProfileQuestions.
     * @example
     * // Create many UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfileQuestions and only return the `id`
     * const userProfileQuestionsWithIdOnly = await prisma.userProfileQuestions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileQuestionsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileQuestionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProfileQuestions.
     * @param {UserProfileQuestionsDeleteArgs} args - Arguments to delete one UserProfileQuestions.
     * @example
     * // Delete one UserProfileQuestions
     * const UserProfileQuestions = await prisma.userProfileQuestions.delete({
     *   where: {
     *     // ... filter to delete one UserProfileQuestions
     *   }
     * })
     * 
     */
    delete<T extends UserProfileQuestionsDeleteArgs>(args: SelectSubset<T, UserProfileQuestionsDeleteArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProfileQuestions.
     * @param {UserProfileQuestionsUpdateArgs} args - Arguments to update one UserProfileQuestions.
     * @example
     * // Update one UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileQuestionsUpdateArgs>(args: SelectSubset<T, UserProfileQuestionsUpdateArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProfileQuestions.
     * @param {UserProfileQuestionsDeleteManyArgs} args - Arguments to filter UserProfileQuestions to delete.
     * @example
     * // Delete a few UserProfileQuestions
     * const { count } = await prisma.userProfileQuestions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileQuestionsDeleteManyArgs>(args?: SelectSubset<T, UserProfileQuestionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfileQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileQuestionsUpdateManyArgs>(args: SelectSubset<T, UserProfileQuestionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfileQuestions and returns the data updated in the database.
     * @param {UserProfileQuestionsUpdateManyAndReturnArgs} args - Arguments to update many UserProfileQuestions.
     * @example
     * // Update many UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProfileQuestions and only return the `id`
     * const userProfileQuestionsWithIdOnly = await prisma.userProfileQuestions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProfileQuestionsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProfileQuestionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProfileQuestions.
     * @param {UserProfileQuestionsUpsertArgs} args - Arguments to update or create a UserProfileQuestions.
     * @example
     * // Update or create a UserProfileQuestions
     * const userProfileQuestions = await prisma.userProfileQuestions.upsert({
     *   create: {
     *     // ... data to create a UserProfileQuestions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfileQuestions we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileQuestionsUpsertArgs>(args: SelectSubset<T, UserProfileQuestionsUpsertArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProfileQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionsCountArgs} args - Arguments to filter UserProfileQuestions to count.
     * @example
     * // Count the number of UserProfileQuestions
     * const count = await prisma.userProfileQuestions.count({
     *   where: {
     *     // ... the filter for the UserProfileQuestions we want to count
     *   }
     * })
    **/
    count<T extends UserProfileQuestionsCountArgs>(
      args?: Subset<T, UserProfileQuestionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileQuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfileQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileQuestionsAggregateArgs>(args: Subset<T, UserProfileQuestionsAggregateArgs>): Prisma.PrismaPromise<GetUserProfileQuestionsAggregateType<T>>

    /**
     * Group by UserProfileQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileQuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileQuestionsGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileQuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileQuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfileQuestions model
   */
  readonly fields: UserProfileQuestionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfileQuestions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileQuestionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    options<T extends UserProfileQuestions$optionsArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileQuestions$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    answer<T extends UserProfileQuestions$answerArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileQuestions$answerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfileQuestions model
   */
  interface UserProfileQuestionsFieldRefs {
    readonly id: FieldRef<"UserProfileQuestions", 'String'>
    readonly question_text: FieldRef<"UserProfileQuestions", 'String'>
    readonly question_type: FieldRef<"UserProfileQuestions", 'QuestionType'>
    readonly is_required: FieldRef<"UserProfileQuestions", 'Boolean'>
    readonly step_number: FieldRef<"UserProfileQuestions", 'Int'>
    readonly order_number: FieldRef<"UserProfileQuestions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserProfileQuestions findUnique
   */
  export type UserProfileQuestionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestions to fetch.
     */
    where: UserProfileQuestionsWhereUniqueInput
  }

  /**
   * UserProfileQuestions findUniqueOrThrow
   */
  export type UserProfileQuestionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestions to fetch.
     */
    where: UserProfileQuestionsWhereUniqueInput
  }

  /**
   * UserProfileQuestions findFirst
   */
  export type UserProfileQuestionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestions to fetch.
     */
    where?: UserProfileQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfileQuestions to fetch.
     */
    orderBy?: UserProfileQuestionsOrderByWithRelationInput | UserProfileQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfileQuestions.
     */
    cursor?: UserProfileQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfileQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfileQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfileQuestions.
     */
    distinct?: UserProfileQuestionsScalarFieldEnum | UserProfileQuestionsScalarFieldEnum[]
  }

  /**
   * UserProfileQuestions findFirstOrThrow
   */
  export type UserProfileQuestionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestions to fetch.
     */
    where?: UserProfileQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfileQuestions to fetch.
     */
    orderBy?: UserProfileQuestionsOrderByWithRelationInput | UserProfileQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfileQuestions.
     */
    cursor?: UserProfileQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfileQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfileQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfileQuestions.
     */
    distinct?: UserProfileQuestionsScalarFieldEnum | UserProfileQuestionsScalarFieldEnum[]
  }

  /**
   * UserProfileQuestions findMany
   */
  export type UserProfileQuestionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestions to fetch.
     */
    where?: UserProfileQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfileQuestions to fetch.
     */
    orderBy?: UserProfileQuestionsOrderByWithRelationInput | UserProfileQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfileQuestions.
     */
    cursor?: UserProfileQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfileQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfileQuestions.
     */
    skip?: number
    distinct?: UserProfileQuestionsScalarFieldEnum | UserProfileQuestionsScalarFieldEnum[]
  }

  /**
   * UserProfileQuestions create
   */
  export type UserProfileQuestionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfileQuestions.
     */
    data: XOR<UserProfileQuestionsCreateInput, UserProfileQuestionsUncheckedCreateInput>
  }

  /**
   * UserProfileQuestions createMany
   */
  export type UserProfileQuestionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfileQuestions.
     */
    data: UserProfileQuestionsCreateManyInput | UserProfileQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfileQuestions createManyAndReturn
   */
  export type UserProfileQuestionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * The data used to create many UserProfileQuestions.
     */
    data: UserProfileQuestionsCreateManyInput | UserProfileQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfileQuestions update
   */
  export type UserProfileQuestionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfileQuestions.
     */
    data: XOR<UserProfileQuestionsUpdateInput, UserProfileQuestionsUncheckedUpdateInput>
    /**
     * Choose, which UserProfileQuestions to update.
     */
    where: UserProfileQuestionsWhereUniqueInput
  }

  /**
   * UserProfileQuestions updateMany
   */
  export type UserProfileQuestionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfileQuestions.
     */
    data: XOR<UserProfileQuestionsUpdateManyMutationInput, UserProfileQuestionsUncheckedUpdateManyInput>
    /**
     * Filter which UserProfileQuestions to update
     */
    where?: UserProfileQuestionsWhereInput
    /**
     * Limit how many UserProfileQuestions to update.
     */
    limit?: number
  }

  /**
   * UserProfileQuestions updateManyAndReturn
   */
  export type UserProfileQuestionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * The data used to update UserProfileQuestions.
     */
    data: XOR<UserProfileQuestionsUpdateManyMutationInput, UserProfileQuestionsUncheckedUpdateManyInput>
    /**
     * Filter which UserProfileQuestions to update
     */
    where?: UserProfileQuestionsWhereInput
    /**
     * Limit how many UserProfileQuestions to update.
     */
    limit?: number
  }

  /**
   * UserProfileQuestions upsert
   */
  export type UserProfileQuestionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfileQuestions to update in case it exists.
     */
    where: UserProfileQuestionsWhereUniqueInput
    /**
     * In case the UserProfileQuestions found by the `where` argument doesn't exist, create a new UserProfileQuestions with this data.
     */
    create: XOR<UserProfileQuestionsCreateInput, UserProfileQuestionsUncheckedCreateInput>
    /**
     * In case the UserProfileQuestions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileQuestionsUpdateInput, UserProfileQuestionsUncheckedUpdateInput>
  }

  /**
   * UserProfileQuestions delete
   */
  export type UserProfileQuestionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
    /**
     * Filter which UserProfileQuestions to delete.
     */
    where: UserProfileQuestionsWhereUniqueInput
  }

  /**
   * UserProfileQuestions deleteMany
   */
  export type UserProfileQuestionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfileQuestions to delete
     */
    where?: UserProfileQuestionsWhereInput
    /**
     * Limit how many UserProfileQuestions to delete.
     */
    limit?: number
  }

  /**
   * UserProfileQuestions.options
   */
  export type UserProfileQuestions$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    where?: QuestionOptionsWhereInput
    orderBy?: QuestionOptionsOrderByWithRelationInput | QuestionOptionsOrderByWithRelationInput[]
    cursor?: QuestionOptionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionOptionsScalarFieldEnum | QuestionOptionsScalarFieldEnum[]
  }

  /**
   * UserProfileQuestions.answer
   */
  export type UserProfileQuestions$answerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    where?: UserProfileQuestionAnswersWhereInput
    orderBy?: UserProfileQuestionAnswersOrderByWithRelationInput | UserProfileQuestionAnswersOrderByWithRelationInput[]
    cursor?: UserProfileQuestionAnswersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProfileQuestionAnswersScalarFieldEnum | UserProfileQuestionAnswersScalarFieldEnum[]
  }

  /**
   * UserProfileQuestions without action
   */
  export type UserProfileQuestionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestions
     */
    select?: UserProfileQuestionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestions
     */
    omit?: UserProfileQuestionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionsInclude<ExtArgs> | null
  }


  /**
   * Model QuestionOptions
   */

  export type AggregateQuestionOptions = {
    _count: QuestionOptionsCountAggregateOutputType | null
    _avg: QuestionOptionsAvgAggregateOutputType | null
    _sum: QuestionOptionsSumAggregateOutputType | null
    _min: QuestionOptionsMinAggregateOutputType | null
    _max: QuestionOptionsMaxAggregateOutputType | null
  }

  export type QuestionOptionsAvgAggregateOutputType = {
    order_number: number | null
  }

  export type QuestionOptionsSumAggregateOutputType = {
    order_number: number | null
  }

  export type QuestionOptionsMinAggregateOutputType = {
    id: string | null
    question_id: string | null
    option_text: string | null
    option_value: string | null
    order_number: number | null
  }

  export type QuestionOptionsMaxAggregateOutputType = {
    id: string | null
    question_id: string | null
    option_text: string | null
    option_value: string | null
    order_number: number | null
  }

  export type QuestionOptionsCountAggregateOutputType = {
    id: number
    question_id: number
    option_text: number
    option_value: number
    order_number: number
    _all: number
  }


  export type QuestionOptionsAvgAggregateInputType = {
    order_number?: true
  }

  export type QuestionOptionsSumAggregateInputType = {
    order_number?: true
  }

  export type QuestionOptionsMinAggregateInputType = {
    id?: true
    question_id?: true
    option_text?: true
    option_value?: true
    order_number?: true
  }

  export type QuestionOptionsMaxAggregateInputType = {
    id?: true
    question_id?: true
    option_text?: true
    option_value?: true
    order_number?: true
  }

  export type QuestionOptionsCountAggregateInputType = {
    id?: true
    question_id?: true
    option_text?: true
    option_value?: true
    order_number?: true
    _all?: true
  }

  export type QuestionOptionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionOptions to aggregate.
     */
    where?: QuestionOptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionsOrderByWithRelationInput | QuestionOptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionOptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionOptions
    **/
    _count?: true | QuestionOptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionOptionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionOptionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionOptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionOptionsMaxAggregateInputType
  }

  export type GetQuestionOptionsAggregateType<T extends QuestionOptionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionOptions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionOptions[P]>
      : GetScalarType<T[P], AggregateQuestionOptions[P]>
  }




  export type QuestionOptionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionsWhereInput
    orderBy?: QuestionOptionsOrderByWithAggregationInput | QuestionOptionsOrderByWithAggregationInput[]
    by: QuestionOptionsScalarFieldEnum[] | QuestionOptionsScalarFieldEnum
    having?: QuestionOptionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionOptionsCountAggregateInputType | true
    _avg?: QuestionOptionsAvgAggregateInputType
    _sum?: QuestionOptionsSumAggregateInputType
    _min?: QuestionOptionsMinAggregateInputType
    _max?: QuestionOptionsMaxAggregateInputType
  }

  export type QuestionOptionsGroupByOutputType = {
    id: string
    question_id: string
    option_text: string
    option_value: string
    order_number: number | null
    _count: QuestionOptionsCountAggregateOutputType | null
    _avg: QuestionOptionsAvgAggregateOutputType | null
    _sum: QuestionOptionsSumAggregateOutputType | null
    _min: QuestionOptionsMinAggregateOutputType | null
    _max: QuestionOptionsMaxAggregateOutputType | null
  }

  type GetQuestionOptionsGroupByPayload<T extends QuestionOptionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionOptionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionOptionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionOptionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionOptionsGroupByOutputType[P]>
        }
      >
    >


  export type QuestionOptionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_id?: boolean
    option_text?: boolean
    option_value?: boolean
    order_number?: boolean
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOptions"]>

  export type QuestionOptionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_id?: boolean
    option_text?: boolean
    option_value?: boolean
    order_number?: boolean
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOptions"]>

  export type QuestionOptionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_id?: boolean
    option_text?: boolean
    option_value?: boolean
    order_number?: boolean
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOptions"]>

  export type QuestionOptionsSelectScalar = {
    id?: boolean
    question_id?: boolean
    option_text?: boolean
    option_value?: boolean
    order_number?: boolean
  }

  export type QuestionOptionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question_id" | "option_text" | "option_value" | "order_number", ExtArgs["result"]["questionOptions"]>
  export type QuestionOptionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
  }
  export type QuestionOptionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
  }
  export type QuestionOptionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
  }

  export type $QuestionOptionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionOptions"
    objects: {
      question: Prisma.$UserProfileQuestionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question_id: string
      option_text: string
      option_value: string
      order_number: number | null
    }, ExtArgs["result"]["questionOptions"]>
    composites: {}
  }

  type QuestionOptionsGetPayload<S extends boolean | null | undefined | QuestionOptionsDefaultArgs> = $Result.GetResult<Prisma.$QuestionOptionsPayload, S>

  type QuestionOptionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionOptionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionOptionsCountAggregateInputType | true
    }

  export interface QuestionOptionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionOptions'], meta: { name: 'QuestionOptions' } }
    /**
     * Find zero or one QuestionOptions that matches the filter.
     * @param {QuestionOptionsFindUniqueArgs} args - Arguments to find a QuestionOptions
     * @example
     * // Get one QuestionOptions
     * const questionOptions = await prisma.questionOptions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionOptionsFindUniqueArgs>(args: SelectSubset<T, QuestionOptionsFindUniqueArgs<ExtArgs>>): Prisma__QuestionOptionsClient<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionOptions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionOptionsFindUniqueOrThrowArgs} args - Arguments to find a QuestionOptions
     * @example
     * // Get one QuestionOptions
     * const questionOptions = await prisma.questionOptions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionOptionsFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionOptionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionOptionsClient<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionsFindFirstArgs} args - Arguments to find a QuestionOptions
     * @example
     * // Get one QuestionOptions
     * const questionOptions = await prisma.questionOptions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionOptionsFindFirstArgs>(args?: SelectSubset<T, QuestionOptionsFindFirstArgs<ExtArgs>>): Prisma__QuestionOptionsClient<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionOptions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionsFindFirstOrThrowArgs} args - Arguments to find a QuestionOptions
     * @example
     * // Get one QuestionOptions
     * const questionOptions = await prisma.questionOptions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionOptionsFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionOptionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionOptionsClient<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionOptions
     * const questionOptions = await prisma.questionOptions.findMany()
     * 
     * // Get first 10 QuestionOptions
     * const questionOptions = await prisma.questionOptions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionOptionsWithIdOnly = await prisma.questionOptions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionOptionsFindManyArgs>(args?: SelectSubset<T, QuestionOptionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionOptions.
     * @param {QuestionOptionsCreateArgs} args - Arguments to create a QuestionOptions.
     * @example
     * // Create one QuestionOptions
     * const QuestionOptions = await prisma.questionOptions.create({
     *   data: {
     *     // ... data to create a QuestionOptions
     *   }
     * })
     * 
     */
    create<T extends QuestionOptionsCreateArgs>(args: SelectSubset<T, QuestionOptionsCreateArgs<ExtArgs>>): Prisma__QuestionOptionsClient<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionOptions.
     * @param {QuestionOptionsCreateManyArgs} args - Arguments to create many QuestionOptions.
     * @example
     * // Create many QuestionOptions
     * const questionOptions = await prisma.questionOptions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionOptionsCreateManyArgs>(args?: SelectSubset<T, QuestionOptionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionOptions and returns the data saved in the database.
     * @param {QuestionOptionsCreateManyAndReturnArgs} args - Arguments to create many QuestionOptions.
     * @example
     * // Create many QuestionOptions
     * const questionOptions = await prisma.questionOptions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionOptions and only return the `id`
     * const questionOptionsWithIdOnly = await prisma.questionOptions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionOptionsCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionOptionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionOptions.
     * @param {QuestionOptionsDeleteArgs} args - Arguments to delete one QuestionOptions.
     * @example
     * // Delete one QuestionOptions
     * const QuestionOptions = await prisma.questionOptions.delete({
     *   where: {
     *     // ... filter to delete one QuestionOptions
     *   }
     * })
     * 
     */
    delete<T extends QuestionOptionsDeleteArgs>(args: SelectSubset<T, QuestionOptionsDeleteArgs<ExtArgs>>): Prisma__QuestionOptionsClient<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionOptions.
     * @param {QuestionOptionsUpdateArgs} args - Arguments to update one QuestionOptions.
     * @example
     * // Update one QuestionOptions
     * const questionOptions = await prisma.questionOptions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionOptionsUpdateArgs>(args: SelectSubset<T, QuestionOptionsUpdateArgs<ExtArgs>>): Prisma__QuestionOptionsClient<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionOptions.
     * @param {QuestionOptionsDeleteManyArgs} args - Arguments to filter QuestionOptions to delete.
     * @example
     * // Delete a few QuestionOptions
     * const { count } = await prisma.questionOptions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionOptionsDeleteManyArgs>(args?: SelectSubset<T, QuestionOptionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionOptions
     * const questionOptions = await prisma.questionOptions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionOptionsUpdateManyArgs>(args: SelectSubset<T, QuestionOptionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionOptions and returns the data updated in the database.
     * @param {QuestionOptionsUpdateManyAndReturnArgs} args - Arguments to update many QuestionOptions.
     * @example
     * // Update many QuestionOptions
     * const questionOptions = await prisma.questionOptions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionOptions and only return the `id`
     * const questionOptionsWithIdOnly = await prisma.questionOptions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionOptionsUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionOptionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionOptions.
     * @param {QuestionOptionsUpsertArgs} args - Arguments to update or create a QuestionOptions.
     * @example
     * // Update or create a QuestionOptions
     * const questionOptions = await prisma.questionOptions.upsert({
     *   create: {
     *     // ... data to create a QuestionOptions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionOptions we want to update
     *   }
     * })
     */
    upsert<T extends QuestionOptionsUpsertArgs>(args: SelectSubset<T, QuestionOptionsUpsertArgs<ExtArgs>>): Prisma__QuestionOptionsClient<$Result.GetResult<Prisma.$QuestionOptionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionsCountArgs} args - Arguments to filter QuestionOptions to count.
     * @example
     * // Count the number of QuestionOptions
     * const count = await prisma.questionOptions.count({
     *   where: {
     *     // ... the filter for the QuestionOptions we want to count
     *   }
     * })
    **/
    count<T extends QuestionOptionsCountArgs>(
      args?: Subset<T, QuestionOptionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionOptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionOptionsAggregateArgs>(args: Subset<T, QuestionOptionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionOptionsAggregateType<T>>

    /**
     * Group by QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionOptionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionOptionsGroupByArgs['orderBy'] }
        : { orderBy?: QuestionOptionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionOptionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionOptionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionOptions model
   */
  readonly fields: QuestionOptionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionOptions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionOptionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends UserProfileQuestionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileQuestionsDefaultArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionOptions model
   */
  interface QuestionOptionsFieldRefs {
    readonly id: FieldRef<"QuestionOptions", 'String'>
    readonly question_id: FieldRef<"QuestionOptions", 'String'>
    readonly option_text: FieldRef<"QuestionOptions", 'String'>
    readonly option_value: FieldRef<"QuestionOptions", 'String'>
    readonly order_number: FieldRef<"QuestionOptions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * QuestionOptions findUnique
   */
  export type QuestionOptionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOptions to fetch.
     */
    where: QuestionOptionsWhereUniqueInput
  }

  /**
   * QuestionOptions findUniqueOrThrow
   */
  export type QuestionOptionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOptions to fetch.
     */
    where: QuestionOptionsWhereUniqueInput
  }

  /**
   * QuestionOptions findFirst
   */
  export type QuestionOptionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOptions to fetch.
     */
    where?: QuestionOptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionsOrderByWithRelationInput | QuestionOptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionOptions.
     */
    cursor?: QuestionOptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionOptions.
     */
    distinct?: QuestionOptionsScalarFieldEnum | QuestionOptionsScalarFieldEnum[]
  }

  /**
   * QuestionOptions findFirstOrThrow
   */
  export type QuestionOptionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOptions to fetch.
     */
    where?: QuestionOptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionsOrderByWithRelationInput | QuestionOptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionOptions.
     */
    cursor?: QuestionOptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionOptions.
     */
    distinct?: QuestionOptionsScalarFieldEnum | QuestionOptionsScalarFieldEnum[]
  }

  /**
   * QuestionOptions findMany
   */
  export type QuestionOptionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOptions to fetch.
     */
    where?: QuestionOptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionsOrderByWithRelationInput | QuestionOptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionOptions.
     */
    cursor?: QuestionOptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    distinct?: QuestionOptionsScalarFieldEnum | QuestionOptionsScalarFieldEnum[]
  }

  /**
   * QuestionOptions create
   */
  export type QuestionOptionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionOptions.
     */
    data: XOR<QuestionOptionsCreateInput, QuestionOptionsUncheckedCreateInput>
  }

  /**
   * QuestionOptions createMany
   */
  export type QuestionOptionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionOptions.
     */
    data: QuestionOptionsCreateManyInput | QuestionOptionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionOptions createManyAndReturn
   */
  export type QuestionOptionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionOptions.
     */
    data: QuestionOptionsCreateManyInput | QuestionOptionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionOptions update
   */
  export type QuestionOptionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionOptions.
     */
    data: XOR<QuestionOptionsUpdateInput, QuestionOptionsUncheckedUpdateInput>
    /**
     * Choose, which QuestionOptions to update.
     */
    where: QuestionOptionsWhereUniqueInput
  }

  /**
   * QuestionOptions updateMany
   */
  export type QuestionOptionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionOptions.
     */
    data: XOR<QuestionOptionsUpdateManyMutationInput, QuestionOptionsUncheckedUpdateManyInput>
    /**
     * Filter which QuestionOptions to update
     */
    where?: QuestionOptionsWhereInput
    /**
     * Limit how many QuestionOptions to update.
     */
    limit?: number
  }

  /**
   * QuestionOptions updateManyAndReturn
   */
  export type QuestionOptionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * The data used to update QuestionOptions.
     */
    data: XOR<QuestionOptionsUpdateManyMutationInput, QuestionOptionsUncheckedUpdateManyInput>
    /**
     * Filter which QuestionOptions to update
     */
    where?: QuestionOptionsWhereInput
    /**
     * Limit how many QuestionOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionOptions upsert
   */
  export type QuestionOptionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionOptions to update in case it exists.
     */
    where: QuestionOptionsWhereUniqueInput
    /**
     * In case the QuestionOptions found by the `where` argument doesn't exist, create a new QuestionOptions with this data.
     */
    create: XOR<QuestionOptionsCreateInput, QuestionOptionsUncheckedCreateInput>
    /**
     * In case the QuestionOptions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionOptionsUpdateInput, QuestionOptionsUncheckedUpdateInput>
  }

  /**
   * QuestionOptions delete
   */
  export type QuestionOptionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
    /**
     * Filter which QuestionOptions to delete.
     */
    where: QuestionOptionsWhereUniqueInput
  }

  /**
   * QuestionOptions deleteMany
   */
  export type QuestionOptionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionOptions to delete
     */
    where?: QuestionOptionsWhereInput
    /**
     * Limit how many QuestionOptions to delete.
     */
    limit?: number
  }

  /**
   * QuestionOptions without action
   */
  export type QuestionOptionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptions
     */
    select?: QuestionOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOptions
     */
    omit?: QuestionOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionsInclude<ExtArgs> | null
  }


  /**
   * Model UserProfileQuestionAnswers
   */

  export type AggregateUserProfileQuestionAnswers = {
    _count: UserProfileQuestionAnswersCountAggregateOutputType | null
    _min: UserProfileQuestionAnswersMinAggregateOutputType | null
    _max: UserProfileQuestionAnswersMaxAggregateOutputType | null
  }

  export type UserProfileQuestionAnswersMinAggregateOutputType = {
    id: string | null
    question_id: string | null
    answer_text: string | null
    user_id: string | null
  }

  export type UserProfileQuestionAnswersMaxAggregateOutputType = {
    id: string | null
    question_id: string | null
    answer_text: string | null
    user_id: string | null
  }

  export type UserProfileQuestionAnswersCountAggregateOutputType = {
    id: number
    question_id: number
    answer_text: number
    user_id: number
    _all: number
  }


  export type UserProfileQuestionAnswersMinAggregateInputType = {
    id?: true
    question_id?: true
    answer_text?: true
    user_id?: true
  }

  export type UserProfileQuestionAnswersMaxAggregateInputType = {
    id?: true
    question_id?: true
    answer_text?: true
    user_id?: true
  }

  export type UserProfileQuestionAnswersCountAggregateInputType = {
    id?: true
    question_id?: true
    answer_text?: true
    user_id?: true
    _all?: true
  }

  export type UserProfileQuestionAnswersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfileQuestionAnswers to aggregate.
     */
    where?: UserProfileQuestionAnswersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfileQuestionAnswers to fetch.
     */
    orderBy?: UserProfileQuestionAnswersOrderByWithRelationInput | UserProfileQuestionAnswersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileQuestionAnswersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfileQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfileQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfileQuestionAnswers
    **/
    _count?: true | UserProfileQuestionAnswersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileQuestionAnswersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileQuestionAnswersMaxAggregateInputType
  }

  export type GetUserProfileQuestionAnswersAggregateType<T extends UserProfileQuestionAnswersAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfileQuestionAnswers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfileQuestionAnswers[P]>
      : GetScalarType<T[P], AggregateUserProfileQuestionAnswers[P]>
  }




  export type UserProfileQuestionAnswersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileQuestionAnswersWhereInput
    orderBy?: UserProfileQuestionAnswersOrderByWithAggregationInput | UserProfileQuestionAnswersOrderByWithAggregationInput[]
    by: UserProfileQuestionAnswersScalarFieldEnum[] | UserProfileQuestionAnswersScalarFieldEnum
    having?: UserProfileQuestionAnswersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileQuestionAnswersCountAggregateInputType | true
    _min?: UserProfileQuestionAnswersMinAggregateInputType
    _max?: UserProfileQuestionAnswersMaxAggregateInputType
  }

  export type UserProfileQuestionAnswersGroupByOutputType = {
    id: string
    question_id: string
    answer_text: string | null
    user_id: string
    _count: UserProfileQuestionAnswersCountAggregateOutputType | null
    _min: UserProfileQuestionAnswersMinAggregateOutputType | null
    _max: UserProfileQuestionAnswersMaxAggregateOutputType | null
  }

  type GetUserProfileQuestionAnswersGroupByPayload<T extends UserProfileQuestionAnswersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileQuestionAnswersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileQuestionAnswersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileQuestionAnswersGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileQuestionAnswersGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileQuestionAnswersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_id?: boolean
    answer_text?: boolean
    user_id?: boolean
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
    answer_options?: boolean | UserProfileQuestionAnswers$answer_optionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | UserProfileQuestionAnswersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfileQuestionAnswers"]>

  export type UserProfileQuestionAnswersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_id?: boolean
    answer_text?: boolean
    user_id?: boolean
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfileQuestionAnswers"]>

  export type UserProfileQuestionAnswersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question_id?: boolean
    answer_text?: boolean
    user_id?: boolean
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfileQuestionAnswers"]>

  export type UserProfileQuestionAnswersSelectScalar = {
    id?: boolean
    question_id?: boolean
    answer_text?: boolean
    user_id?: boolean
  }

  export type UserProfileQuestionAnswersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question_id" | "answer_text" | "user_id", ExtArgs["result"]["userProfileQuestionAnswers"]>
  export type UserProfileQuestionAnswersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
    answer_options?: boolean | UserProfileQuestionAnswers$answer_optionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | UserProfileQuestionAnswersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserProfileQuestionAnswersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileQuestionAnswersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | UserProfileQuestionsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProfileQuestionAnswersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfileQuestionAnswers"
    objects: {
      question: Prisma.$UserProfileQuestionsPayload<ExtArgs>
      answer_options: Prisma.$SelectedAnswerOptionsPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question_id: string
      answer_text: string | null
      user_id: string
    }, ExtArgs["result"]["userProfileQuestionAnswers"]>
    composites: {}
  }

  type UserProfileQuestionAnswersGetPayload<S extends boolean | null | undefined | UserProfileQuestionAnswersDefaultArgs> = $Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload, S>

  type UserProfileQuestionAnswersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProfileQuestionAnswersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProfileQuestionAnswersCountAggregateInputType | true
    }

  export interface UserProfileQuestionAnswersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfileQuestionAnswers'], meta: { name: 'UserProfileQuestionAnswers' } }
    /**
     * Find zero or one UserProfileQuestionAnswers that matches the filter.
     * @param {UserProfileQuestionAnswersFindUniqueArgs} args - Arguments to find a UserProfileQuestionAnswers
     * @example
     * // Get one UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileQuestionAnswersFindUniqueArgs>(args: SelectSubset<T, UserProfileQuestionAnswersFindUniqueArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProfileQuestionAnswers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProfileQuestionAnswersFindUniqueOrThrowArgs} args - Arguments to find a UserProfileQuestionAnswers
     * @example
     * // Get one UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileQuestionAnswersFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileQuestionAnswersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfileQuestionAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionAnswersFindFirstArgs} args - Arguments to find a UserProfileQuestionAnswers
     * @example
     * // Get one UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileQuestionAnswersFindFirstArgs>(args?: SelectSubset<T, UserProfileQuestionAnswersFindFirstArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfileQuestionAnswers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionAnswersFindFirstOrThrowArgs} args - Arguments to find a UserProfileQuestionAnswers
     * @example
     * // Get one UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileQuestionAnswersFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileQuestionAnswersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProfileQuestionAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionAnswersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.findMany()
     * 
     * // Get first 10 UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileQuestionAnswersWithIdOnly = await prisma.userProfileQuestionAnswers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileQuestionAnswersFindManyArgs>(args?: SelectSubset<T, UserProfileQuestionAnswersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProfileQuestionAnswers.
     * @param {UserProfileQuestionAnswersCreateArgs} args - Arguments to create a UserProfileQuestionAnswers.
     * @example
     * // Create one UserProfileQuestionAnswers
     * const UserProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.create({
     *   data: {
     *     // ... data to create a UserProfileQuestionAnswers
     *   }
     * })
     * 
     */
    create<T extends UserProfileQuestionAnswersCreateArgs>(args: SelectSubset<T, UserProfileQuestionAnswersCreateArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProfileQuestionAnswers.
     * @param {UserProfileQuestionAnswersCreateManyArgs} args - Arguments to create many UserProfileQuestionAnswers.
     * @example
     * // Create many UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileQuestionAnswersCreateManyArgs>(args?: SelectSubset<T, UserProfileQuestionAnswersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfileQuestionAnswers and returns the data saved in the database.
     * @param {UserProfileQuestionAnswersCreateManyAndReturnArgs} args - Arguments to create many UserProfileQuestionAnswers.
     * @example
     * // Create many UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfileQuestionAnswers and only return the `id`
     * const userProfileQuestionAnswersWithIdOnly = await prisma.userProfileQuestionAnswers.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileQuestionAnswersCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileQuestionAnswersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProfileQuestionAnswers.
     * @param {UserProfileQuestionAnswersDeleteArgs} args - Arguments to delete one UserProfileQuestionAnswers.
     * @example
     * // Delete one UserProfileQuestionAnswers
     * const UserProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.delete({
     *   where: {
     *     // ... filter to delete one UserProfileQuestionAnswers
     *   }
     * })
     * 
     */
    delete<T extends UserProfileQuestionAnswersDeleteArgs>(args: SelectSubset<T, UserProfileQuestionAnswersDeleteArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProfileQuestionAnswers.
     * @param {UserProfileQuestionAnswersUpdateArgs} args - Arguments to update one UserProfileQuestionAnswers.
     * @example
     * // Update one UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileQuestionAnswersUpdateArgs>(args: SelectSubset<T, UserProfileQuestionAnswersUpdateArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProfileQuestionAnswers.
     * @param {UserProfileQuestionAnswersDeleteManyArgs} args - Arguments to filter UserProfileQuestionAnswers to delete.
     * @example
     * // Delete a few UserProfileQuestionAnswers
     * const { count } = await prisma.userProfileQuestionAnswers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileQuestionAnswersDeleteManyArgs>(args?: SelectSubset<T, UserProfileQuestionAnswersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfileQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionAnswersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileQuestionAnswersUpdateManyArgs>(args: SelectSubset<T, UserProfileQuestionAnswersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfileQuestionAnswers and returns the data updated in the database.
     * @param {UserProfileQuestionAnswersUpdateManyAndReturnArgs} args - Arguments to update many UserProfileQuestionAnswers.
     * @example
     * // Update many UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProfileQuestionAnswers and only return the `id`
     * const userProfileQuestionAnswersWithIdOnly = await prisma.userProfileQuestionAnswers.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProfileQuestionAnswersUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProfileQuestionAnswersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProfileQuestionAnswers.
     * @param {UserProfileQuestionAnswersUpsertArgs} args - Arguments to update or create a UserProfileQuestionAnswers.
     * @example
     * // Update or create a UserProfileQuestionAnswers
     * const userProfileQuestionAnswers = await prisma.userProfileQuestionAnswers.upsert({
     *   create: {
     *     // ... data to create a UserProfileQuestionAnswers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfileQuestionAnswers we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileQuestionAnswersUpsertArgs>(args: SelectSubset<T, UserProfileQuestionAnswersUpsertArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProfileQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionAnswersCountArgs} args - Arguments to filter UserProfileQuestionAnswers to count.
     * @example
     * // Count the number of UserProfileQuestionAnswers
     * const count = await prisma.userProfileQuestionAnswers.count({
     *   where: {
     *     // ... the filter for the UserProfileQuestionAnswers we want to count
     *   }
     * })
    **/
    count<T extends UserProfileQuestionAnswersCountArgs>(
      args?: Subset<T, UserProfileQuestionAnswersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileQuestionAnswersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfileQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionAnswersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileQuestionAnswersAggregateArgs>(args: Subset<T, UserProfileQuestionAnswersAggregateArgs>): Prisma.PrismaPromise<GetUserProfileQuestionAnswersAggregateType<T>>

    /**
     * Group by UserProfileQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileQuestionAnswersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileQuestionAnswersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileQuestionAnswersGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileQuestionAnswersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileQuestionAnswersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileQuestionAnswersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfileQuestionAnswers model
   */
  readonly fields: UserProfileQuestionAnswersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfileQuestionAnswers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileQuestionAnswersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends UserProfileQuestionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileQuestionsDefaultArgs<ExtArgs>>): Prisma__UserProfileQuestionsClient<$Result.GetResult<Prisma.$UserProfileQuestionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    answer_options<T extends UserProfileQuestionAnswers$answer_optionsArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileQuestionAnswers$answer_optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfileQuestionAnswers model
   */
  interface UserProfileQuestionAnswersFieldRefs {
    readonly id: FieldRef<"UserProfileQuestionAnswers", 'String'>
    readonly question_id: FieldRef<"UserProfileQuestionAnswers", 'String'>
    readonly answer_text: FieldRef<"UserProfileQuestionAnswers", 'String'>
    readonly user_id: FieldRef<"UserProfileQuestionAnswers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserProfileQuestionAnswers findUnique
   */
  export type UserProfileQuestionAnswersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestionAnswers to fetch.
     */
    where: UserProfileQuestionAnswersWhereUniqueInput
  }

  /**
   * UserProfileQuestionAnswers findUniqueOrThrow
   */
  export type UserProfileQuestionAnswersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestionAnswers to fetch.
     */
    where: UserProfileQuestionAnswersWhereUniqueInput
  }

  /**
   * UserProfileQuestionAnswers findFirst
   */
  export type UserProfileQuestionAnswersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestionAnswers to fetch.
     */
    where?: UserProfileQuestionAnswersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfileQuestionAnswers to fetch.
     */
    orderBy?: UserProfileQuestionAnswersOrderByWithRelationInput | UserProfileQuestionAnswersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfileQuestionAnswers.
     */
    cursor?: UserProfileQuestionAnswersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfileQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfileQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfileQuestionAnswers.
     */
    distinct?: UserProfileQuestionAnswersScalarFieldEnum | UserProfileQuestionAnswersScalarFieldEnum[]
  }

  /**
   * UserProfileQuestionAnswers findFirstOrThrow
   */
  export type UserProfileQuestionAnswersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestionAnswers to fetch.
     */
    where?: UserProfileQuestionAnswersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfileQuestionAnswers to fetch.
     */
    orderBy?: UserProfileQuestionAnswersOrderByWithRelationInput | UserProfileQuestionAnswersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfileQuestionAnswers.
     */
    cursor?: UserProfileQuestionAnswersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfileQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfileQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfileQuestionAnswers.
     */
    distinct?: UserProfileQuestionAnswersScalarFieldEnum | UserProfileQuestionAnswersScalarFieldEnum[]
  }

  /**
   * UserProfileQuestionAnswers findMany
   */
  export type UserProfileQuestionAnswersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * Filter, which UserProfileQuestionAnswers to fetch.
     */
    where?: UserProfileQuestionAnswersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfileQuestionAnswers to fetch.
     */
    orderBy?: UserProfileQuestionAnswersOrderByWithRelationInput | UserProfileQuestionAnswersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfileQuestionAnswers.
     */
    cursor?: UserProfileQuestionAnswersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfileQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfileQuestionAnswers.
     */
    skip?: number
    distinct?: UserProfileQuestionAnswersScalarFieldEnum | UserProfileQuestionAnswersScalarFieldEnum[]
  }

  /**
   * UserProfileQuestionAnswers create
   */
  export type UserProfileQuestionAnswersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfileQuestionAnswers.
     */
    data: XOR<UserProfileQuestionAnswersCreateInput, UserProfileQuestionAnswersUncheckedCreateInput>
  }

  /**
   * UserProfileQuestionAnswers createMany
   */
  export type UserProfileQuestionAnswersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfileQuestionAnswers.
     */
    data: UserProfileQuestionAnswersCreateManyInput | UserProfileQuestionAnswersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfileQuestionAnswers createManyAndReturn
   */
  export type UserProfileQuestionAnswersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * The data used to create many UserProfileQuestionAnswers.
     */
    data: UserProfileQuestionAnswersCreateManyInput | UserProfileQuestionAnswersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfileQuestionAnswers update
   */
  export type UserProfileQuestionAnswersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfileQuestionAnswers.
     */
    data: XOR<UserProfileQuestionAnswersUpdateInput, UserProfileQuestionAnswersUncheckedUpdateInput>
    /**
     * Choose, which UserProfileQuestionAnswers to update.
     */
    where: UserProfileQuestionAnswersWhereUniqueInput
  }

  /**
   * UserProfileQuestionAnswers updateMany
   */
  export type UserProfileQuestionAnswersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfileQuestionAnswers.
     */
    data: XOR<UserProfileQuestionAnswersUpdateManyMutationInput, UserProfileQuestionAnswersUncheckedUpdateManyInput>
    /**
     * Filter which UserProfileQuestionAnswers to update
     */
    where?: UserProfileQuestionAnswersWhereInput
    /**
     * Limit how many UserProfileQuestionAnswers to update.
     */
    limit?: number
  }

  /**
   * UserProfileQuestionAnswers updateManyAndReturn
   */
  export type UserProfileQuestionAnswersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * The data used to update UserProfileQuestionAnswers.
     */
    data: XOR<UserProfileQuestionAnswersUpdateManyMutationInput, UserProfileQuestionAnswersUncheckedUpdateManyInput>
    /**
     * Filter which UserProfileQuestionAnswers to update
     */
    where?: UserProfileQuestionAnswersWhereInput
    /**
     * Limit how many UserProfileQuestionAnswers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfileQuestionAnswers upsert
   */
  export type UserProfileQuestionAnswersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfileQuestionAnswers to update in case it exists.
     */
    where: UserProfileQuestionAnswersWhereUniqueInput
    /**
     * In case the UserProfileQuestionAnswers found by the `where` argument doesn't exist, create a new UserProfileQuestionAnswers with this data.
     */
    create: XOR<UserProfileQuestionAnswersCreateInput, UserProfileQuestionAnswersUncheckedCreateInput>
    /**
     * In case the UserProfileQuestionAnswers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileQuestionAnswersUpdateInput, UserProfileQuestionAnswersUncheckedUpdateInput>
  }

  /**
   * UserProfileQuestionAnswers delete
   */
  export type UserProfileQuestionAnswersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
    /**
     * Filter which UserProfileQuestionAnswers to delete.
     */
    where: UserProfileQuestionAnswersWhereUniqueInput
  }

  /**
   * UserProfileQuestionAnswers deleteMany
   */
  export type UserProfileQuestionAnswersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfileQuestionAnswers to delete
     */
    where?: UserProfileQuestionAnswersWhereInput
    /**
     * Limit how many UserProfileQuestionAnswers to delete.
     */
    limit?: number
  }

  /**
   * UserProfileQuestionAnswers.answer_options
   */
  export type UserProfileQuestionAnswers$answer_optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    where?: SelectedAnswerOptionsWhereInput
    orderBy?: SelectedAnswerOptionsOrderByWithRelationInput | SelectedAnswerOptionsOrderByWithRelationInput[]
    cursor?: SelectedAnswerOptionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SelectedAnswerOptionsScalarFieldEnum | SelectedAnswerOptionsScalarFieldEnum[]
  }

  /**
   * UserProfileQuestionAnswers without action
   */
  export type UserProfileQuestionAnswersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileQuestionAnswers
     */
    select?: UserProfileQuestionAnswersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfileQuestionAnswers
     */
    omit?: UserProfileQuestionAnswersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileQuestionAnswersInclude<ExtArgs> | null
  }


  /**
   * Model SelectedAnswerOptions
   */

  export type AggregateSelectedAnswerOptions = {
    _count: SelectedAnswerOptionsCountAggregateOutputType | null
    _min: SelectedAnswerOptionsMinAggregateOutputType | null
    _max: SelectedAnswerOptionsMaxAggregateOutputType | null
  }

  export type SelectedAnswerOptionsMinAggregateOutputType = {
    id: string | null
    answer_id: string | null
    option_id: string | null
  }

  export type SelectedAnswerOptionsMaxAggregateOutputType = {
    id: string | null
    answer_id: string | null
    option_id: string | null
  }

  export type SelectedAnswerOptionsCountAggregateOutputType = {
    id: number
    answer_id: number
    option_id: number
    _all: number
  }


  export type SelectedAnswerOptionsMinAggregateInputType = {
    id?: true
    answer_id?: true
    option_id?: true
  }

  export type SelectedAnswerOptionsMaxAggregateInputType = {
    id?: true
    answer_id?: true
    option_id?: true
  }

  export type SelectedAnswerOptionsCountAggregateInputType = {
    id?: true
    answer_id?: true
    option_id?: true
    _all?: true
  }

  export type SelectedAnswerOptionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SelectedAnswerOptions to aggregate.
     */
    where?: SelectedAnswerOptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedAnswerOptions to fetch.
     */
    orderBy?: SelectedAnswerOptionsOrderByWithRelationInput | SelectedAnswerOptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SelectedAnswerOptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedAnswerOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedAnswerOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SelectedAnswerOptions
    **/
    _count?: true | SelectedAnswerOptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SelectedAnswerOptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SelectedAnswerOptionsMaxAggregateInputType
  }

  export type GetSelectedAnswerOptionsAggregateType<T extends SelectedAnswerOptionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSelectedAnswerOptions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelectedAnswerOptions[P]>
      : GetScalarType<T[P], AggregateSelectedAnswerOptions[P]>
  }




  export type SelectedAnswerOptionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SelectedAnswerOptionsWhereInput
    orderBy?: SelectedAnswerOptionsOrderByWithAggregationInput | SelectedAnswerOptionsOrderByWithAggregationInput[]
    by: SelectedAnswerOptionsScalarFieldEnum[] | SelectedAnswerOptionsScalarFieldEnum
    having?: SelectedAnswerOptionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SelectedAnswerOptionsCountAggregateInputType | true
    _min?: SelectedAnswerOptionsMinAggregateInputType
    _max?: SelectedAnswerOptionsMaxAggregateInputType
  }

  export type SelectedAnswerOptionsGroupByOutputType = {
    id: string
    answer_id: string
    option_id: string
    _count: SelectedAnswerOptionsCountAggregateOutputType | null
    _min: SelectedAnswerOptionsMinAggregateOutputType | null
    _max: SelectedAnswerOptionsMaxAggregateOutputType | null
  }

  type GetSelectedAnswerOptionsGroupByPayload<T extends SelectedAnswerOptionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SelectedAnswerOptionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SelectedAnswerOptionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SelectedAnswerOptionsGroupByOutputType[P]>
            : GetScalarType<T[P], SelectedAnswerOptionsGroupByOutputType[P]>
        }
      >
    >


  export type SelectedAnswerOptionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer_id?: boolean
    option_id?: boolean
    answer?: boolean | UserProfileQuestionAnswersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["selectedAnswerOptions"]>

  export type SelectedAnswerOptionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer_id?: boolean
    option_id?: boolean
    answer?: boolean | UserProfileQuestionAnswersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["selectedAnswerOptions"]>

  export type SelectedAnswerOptionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer_id?: boolean
    option_id?: boolean
    answer?: boolean | UserProfileQuestionAnswersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["selectedAnswerOptions"]>

  export type SelectedAnswerOptionsSelectScalar = {
    id?: boolean
    answer_id?: boolean
    option_id?: boolean
  }

  export type SelectedAnswerOptionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "answer_id" | "option_id", ExtArgs["result"]["selectedAnswerOptions"]>
  export type SelectedAnswerOptionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answer?: boolean | UserProfileQuestionAnswersDefaultArgs<ExtArgs>
  }
  export type SelectedAnswerOptionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answer?: boolean | UserProfileQuestionAnswersDefaultArgs<ExtArgs>
  }
  export type SelectedAnswerOptionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answer?: boolean | UserProfileQuestionAnswersDefaultArgs<ExtArgs>
  }

  export type $SelectedAnswerOptionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SelectedAnswerOptions"
    objects: {
      answer: Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      answer_id: string
      option_id: string
    }, ExtArgs["result"]["selectedAnswerOptions"]>
    composites: {}
  }

  type SelectedAnswerOptionsGetPayload<S extends boolean | null | undefined | SelectedAnswerOptionsDefaultArgs> = $Result.GetResult<Prisma.$SelectedAnswerOptionsPayload, S>

  type SelectedAnswerOptionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SelectedAnswerOptionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SelectedAnswerOptionsCountAggregateInputType | true
    }

  export interface SelectedAnswerOptionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SelectedAnswerOptions'], meta: { name: 'SelectedAnswerOptions' } }
    /**
     * Find zero or one SelectedAnswerOptions that matches the filter.
     * @param {SelectedAnswerOptionsFindUniqueArgs} args - Arguments to find a SelectedAnswerOptions
     * @example
     * // Get one SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SelectedAnswerOptionsFindUniqueArgs>(args: SelectSubset<T, SelectedAnswerOptionsFindUniqueArgs<ExtArgs>>): Prisma__SelectedAnswerOptionsClient<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SelectedAnswerOptions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SelectedAnswerOptionsFindUniqueOrThrowArgs} args - Arguments to find a SelectedAnswerOptions
     * @example
     * // Get one SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SelectedAnswerOptionsFindUniqueOrThrowArgs>(args: SelectSubset<T, SelectedAnswerOptionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SelectedAnswerOptionsClient<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SelectedAnswerOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedAnswerOptionsFindFirstArgs} args - Arguments to find a SelectedAnswerOptions
     * @example
     * // Get one SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SelectedAnswerOptionsFindFirstArgs>(args?: SelectSubset<T, SelectedAnswerOptionsFindFirstArgs<ExtArgs>>): Prisma__SelectedAnswerOptionsClient<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SelectedAnswerOptions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedAnswerOptionsFindFirstOrThrowArgs} args - Arguments to find a SelectedAnswerOptions
     * @example
     * // Get one SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SelectedAnswerOptionsFindFirstOrThrowArgs>(args?: SelectSubset<T, SelectedAnswerOptionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SelectedAnswerOptionsClient<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SelectedAnswerOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedAnswerOptionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.findMany()
     * 
     * // Get first 10 SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const selectedAnswerOptionsWithIdOnly = await prisma.selectedAnswerOptions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SelectedAnswerOptionsFindManyArgs>(args?: SelectSubset<T, SelectedAnswerOptionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SelectedAnswerOptions.
     * @param {SelectedAnswerOptionsCreateArgs} args - Arguments to create a SelectedAnswerOptions.
     * @example
     * // Create one SelectedAnswerOptions
     * const SelectedAnswerOptions = await prisma.selectedAnswerOptions.create({
     *   data: {
     *     // ... data to create a SelectedAnswerOptions
     *   }
     * })
     * 
     */
    create<T extends SelectedAnswerOptionsCreateArgs>(args: SelectSubset<T, SelectedAnswerOptionsCreateArgs<ExtArgs>>): Prisma__SelectedAnswerOptionsClient<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SelectedAnswerOptions.
     * @param {SelectedAnswerOptionsCreateManyArgs} args - Arguments to create many SelectedAnswerOptions.
     * @example
     * // Create many SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SelectedAnswerOptionsCreateManyArgs>(args?: SelectSubset<T, SelectedAnswerOptionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SelectedAnswerOptions and returns the data saved in the database.
     * @param {SelectedAnswerOptionsCreateManyAndReturnArgs} args - Arguments to create many SelectedAnswerOptions.
     * @example
     * // Create many SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SelectedAnswerOptions and only return the `id`
     * const selectedAnswerOptionsWithIdOnly = await prisma.selectedAnswerOptions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SelectedAnswerOptionsCreateManyAndReturnArgs>(args?: SelectSubset<T, SelectedAnswerOptionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SelectedAnswerOptions.
     * @param {SelectedAnswerOptionsDeleteArgs} args - Arguments to delete one SelectedAnswerOptions.
     * @example
     * // Delete one SelectedAnswerOptions
     * const SelectedAnswerOptions = await prisma.selectedAnswerOptions.delete({
     *   where: {
     *     // ... filter to delete one SelectedAnswerOptions
     *   }
     * })
     * 
     */
    delete<T extends SelectedAnswerOptionsDeleteArgs>(args: SelectSubset<T, SelectedAnswerOptionsDeleteArgs<ExtArgs>>): Prisma__SelectedAnswerOptionsClient<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SelectedAnswerOptions.
     * @param {SelectedAnswerOptionsUpdateArgs} args - Arguments to update one SelectedAnswerOptions.
     * @example
     * // Update one SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SelectedAnswerOptionsUpdateArgs>(args: SelectSubset<T, SelectedAnswerOptionsUpdateArgs<ExtArgs>>): Prisma__SelectedAnswerOptionsClient<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SelectedAnswerOptions.
     * @param {SelectedAnswerOptionsDeleteManyArgs} args - Arguments to filter SelectedAnswerOptions to delete.
     * @example
     * // Delete a few SelectedAnswerOptions
     * const { count } = await prisma.selectedAnswerOptions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SelectedAnswerOptionsDeleteManyArgs>(args?: SelectSubset<T, SelectedAnswerOptionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SelectedAnswerOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedAnswerOptionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SelectedAnswerOptionsUpdateManyArgs>(args: SelectSubset<T, SelectedAnswerOptionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SelectedAnswerOptions and returns the data updated in the database.
     * @param {SelectedAnswerOptionsUpdateManyAndReturnArgs} args - Arguments to update many SelectedAnswerOptions.
     * @example
     * // Update many SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SelectedAnswerOptions and only return the `id`
     * const selectedAnswerOptionsWithIdOnly = await prisma.selectedAnswerOptions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SelectedAnswerOptionsUpdateManyAndReturnArgs>(args: SelectSubset<T, SelectedAnswerOptionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SelectedAnswerOptions.
     * @param {SelectedAnswerOptionsUpsertArgs} args - Arguments to update or create a SelectedAnswerOptions.
     * @example
     * // Update or create a SelectedAnswerOptions
     * const selectedAnswerOptions = await prisma.selectedAnswerOptions.upsert({
     *   create: {
     *     // ... data to create a SelectedAnswerOptions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SelectedAnswerOptions we want to update
     *   }
     * })
     */
    upsert<T extends SelectedAnswerOptionsUpsertArgs>(args: SelectSubset<T, SelectedAnswerOptionsUpsertArgs<ExtArgs>>): Prisma__SelectedAnswerOptionsClient<$Result.GetResult<Prisma.$SelectedAnswerOptionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SelectedAnswerOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedAnswerOptionsCountArgs} args - Arguments to filter SelectedAnswerOptions to count.
     * @example
     * // Count the number of SelectedAnswerOptions
     * const count = await prisma.selectedAnswerOptions.count({
     *   where: {
     *     // ... the filter for the SelectedAnswerOptions we want to count
     *   }
     * })
    **/
    count<T extends SelectedAnswerOptionsCountArgs>(
      args?: Subset<T, SelectedAnswerOptionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SelectedAnswerOptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SelectedAnswerOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedAnswerOptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SelectedAnswerOptionsAggregateArgs>(args: Subset<T, SelectedAnswerOptionsAggregateArgs>): Prisma.PrismaPromise<GetSelectedAnswerOptionsAggregateType<T>>

    /**
     * Group by SelectedAnswerOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedAnswerOptionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SelectedAnswerOptionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SelectedAnswerOptionsGroupByArgs['orderBy'] }
        : { orderBy?: SelectedAnswerOptionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SelectedAnswerOptionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelectedAnswerOptionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SelectedAnswerOptions model
   */
  readonly fields: SelectedAnswerOptionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SelectedAnswerOptions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SelectedAnswerOptionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    answer<T extends UserProfileQuestionAnswersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileQuestionAnswersDefaultArgs<ExtArgs>>): Prisma__UserProfileQuestionAnswersClient<$Result.GetResult<Prisma.$UserProfileQuestionAnswersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SelectedAnswerOptions model
   */
  interface SelectedAnswerOptionsFieldRefs {
    readonly id: FieldRef<"SelectedAnswerOptions", 'String'>
    readonly answer_id: FieldRef<"SelectedAnswerOptions", 'String'>
    readonly option_id: FieldRef<"SelectedAnswerOptions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SelectedAnswerOptions findUnique
   */
  export type SelectedAnswerOptionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * Filter, which SelectedAnswerOptions to fetch.
     */
    where: SelectedAnswerOptionsWhereUniqueInput
  }

  /**
   * SelectedAnswerOptions findUniqueOrThrow
   */
  export type SelectedAnswerOptionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * Filter, which SelectedAnswerOptions to fetch.
     */
    where: SelectedAnswerOptionsWhereUniqueInput
  }

  /**
   * SelectedAnswerOptions findFirst
   */
  export type SelectedAnswerOptionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * Filter, which SelectedAnswerOptions to fetch.
     */
    where?: SelectedAnswerOptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedAnswerOptions to fetch.
     */
    orderBy?: SelectedAnswerOptionsOrderByWithRelationInput | SelectedAnswerOptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SelectedAnswerOptions.
     */
    cursor?: SelectedAnswerOptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedAnswerOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedAnswerOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SelectedAnswerOptions.
     */
    distinct?: SelectedAnswerOptionsScalarFieldEnum | SelectedAnswerOptionsScalarFieldEnum[]
  }

  /**
   * SelectedAnswerOptions findFirstOrThrow
   */
  export type SelectedAnswerOptionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * Filter, which SelectedAnswerOptions to fetch.
     */
    where?: SelectedAnswerOptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedAnswerOptions to fetch.
     */
    orderBy?: SelectedAnswerOptionsOrderByWithRelationInput | SelectedAnswerOptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SelectedAnswerOptions.
     */
    cursor?: SelectedAnswerOptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedAnswerOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedAnswerOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SelectedAnswerOptions.
     */
    distinct?: SelectedAnswerOptionsScalarFieldEnum | SelectedAnswerOptionsScalarFieldEnum[]
  }

  /**
   * SelectedAnswerOptions findMany
   */
  export type SelectedAnswerOptionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * Filter, which SelectedAnswerOptions to fetch.
     */
    where?: SelectedAnswerOptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedAnswerOptions to fetch.
     */
    orderBy?: SelectedAnswerOptionsOrderByWithRelationInput | SelectedAnswerOptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SelectedAnswerOptions.
     */
    cursor?: SelectedAnswerOptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedAnswerOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedAnswerOptions.
     */
    skip?: number
    distinct?: SelectedAnswerOptionsScalarFieldEnum | SelectedAnswerOptionsScalarFieldEnum[]
  }

  /**
   * SelectedAnswerOptions create
   */
  export type SelectedAnswerOptionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * The data needed to create a SelectedAnswerOptions.
     */
    data: XOR<SelectedAnswerOptionsCreateInput, SelectedAnswerOptionsUncheckedCreateInput>
  }

  /**
   * SelectedAnswerOptions createMany
   */
  export type SelectedAnswerOptionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SelectedAnswerOptions.
     */
    data: SelectedAnswerOptionsCreateManyInput | SelectedAnswerOptionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SelectedAnswerOptions createManyAndReturn
   */
  export type SelectedAnswerOptionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * The data used to create many SelectedAnswerOptions.
     */
    data: SelectedAnswerOptionsCreateManyInput | SelectedAnswerOptionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SelectedAnswerOptions update
   */
  export type SelectedAnswerOptionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * The data needed to update a SelectedAnswerOptions.
     */
    data: XOR<SelectedAnswerOptionsUpdateInput, SelectedAnswerOptionsUncheckedUpdateInput>
    /**
     * Choose, which SelectedAnswerOptions to update.
     */
    where: SelectedAnswerOptionsWhereUniqueInput
  }

  /**
   * SelectedAnswerOptions updateMany
   */
  export type SelectedAnswerOptionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SelectedAnswerOptions.
     */
    data: XOR<SelectedAnswerOptionsUpdateManyMutationInput, SelectedAnswerOptionsUncheckedUpdateManyInput>
    /**
     * Filter which SelectedAnswerOptions to update
     */
    where?: SelectedAnswerOptionsWhereInput
    /**
     * Limit how many SelectedAnswerOptions to update.
     */
    limit?: number
  }

  /**
   * SelectedAnswerOptions updateManyAndReturn
   */
  export type SelectedAnswerOptionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * The data used to update SelectedAnswerOptions.
     */
    data: XOR<SelectedAnswerOptionsUpdateManyMutationInput, SelectedAnswerOptionsUncheckedUpdateManyInput>
    /**
     * Filter which SelectedAnswerOptions to update
     */
    where?: SelectedAnswerOptionsWhereInput
    /**
     * Limit how many SelectedAnswerOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SelectedAnswerOptions upsert
   */
  export type SelectedAnswerOptionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * The filter to search for the SelectedAnswerOptions to update in case it exists.
     */
    where: SelectedAnswerOptionsWhereUniqueInput
    /**
     * In case the SelectedAnswerOptions found by the `where` argument doesn't exist, create a new SelectedAnswerOptions with this data.
     */
    create: XOR<SelectedAnswerOptionsCreateInput, SelectedAnswerOptionsUncheckedCreateInput>
    /**
     * In case the SelectedAnswerOptions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SelectedAnswerOptionsUpdateInput, SelectedAnswerOptionsUncheckedUpdateInput>
  }

  /**
   * SelectedAnswerOptions delete
   */
  export type SelectedAnswerOptionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
    /**
     * Filter which SelectedAnswerOptions to delete.
     */
    where: SelectedAnswerOptionsWhereUniqueInput
  }

  /**
   * SelectedAnswerOptions deleteMany
   */
  export type SelectedAnswerOptionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SelectedAnswerOptions to delete
     */
    where?: SelectedAnswerOptionsWhereInput
    /**
     * Limit how many SelectedAnswerOptions to delete.
     */
    limit?: number
  }

  /**
   * SelectedAnswerOptions without action
   */
  export type SelectedAnswerOptionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedAnswerOptions
     */
    select?: SelectedAnswerOptionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SelectedAnswerOptions
     */
    omit?: SelectedAnswerOptionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedAnswerOptionsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    position: 'position',
    first_name: 'first_name',
    last_name: 'last_name',
    role: 'role',
    is_email_verified: 'is_email_verified',
    company: 'company',
    location: 'location',
    birth_date: 'birth_date',
    phone_number: 'phone_number',
    skype: 'skype',
    email: 'email',
    username: 'username',
    password: 'password',
    fileName: 'fileName',
    level: 'level',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MemberInvitationsScalarFieldEnum: {
    id: 'id',
    email: 'email',
    invited_by_user_id: 'invited_by_user_id',
    invitation_token: 'invitation_token',
    status: 'status',
    expires_at: 'expires_at',
    sent_at: 'sent_at',
    accepted_at: 'accepted_at'
  };

  export type MemberInvitationsScalarFieldEnum = (typeof MemberInvitationsScalarFieldEnum)[keyof typeof MemberInvitationsScalarFieldEnum]


  export const UserProfileQuestionsScalarFieldEnum: {
    id: 'id',
    question_text: 'question_text',
    question_type: 'question_type',
    is_required: 'is_required',
    step_number: 'step_number',
    order_number: 'order_number'
  };

  export type UserProfileQuestionsScalarFieldEnum = (typeof UserProfileQuestionsScalarFieldEnum)[keyof typeof UserProfileQuestionsScalarFieldEnum]


  export const QuestionOptionsScalarFieldEnum: {
    id: 'id',
    question_id: 'question_id',
    option_text: 'option_text',
    option_value: 'option_value',
    order_number: 'order_number'
  };

  export type QuestionOptionsScalarFieldEnum = (typeof QuestionOptionsScalarFieldEnum)[keyof typeof QuestionOptionsScalarFieldEnum]


  export const UserProfileQuestionAnswersScalarFieldEnum: {
    id: 'id',
    question_id: 'question_id',
    answer_text: 'answer_text',
    user_id: 'user_id'
  };

  export type UserProfileQuestionAnswersScalarFieldEnum = (typeof UserProfileQuestionAnswersScalarFieldEnum)[keyof typeof UserProfileQuestionAnswersScalarFieldEnum]


  export const SelectedAnswerOptionsScalarFieldEnum: {
    id: 'id',
    answer_id: 'answer_id',
    option_id: 'option_id'
  };

  export type SelectedAnswerOptionsScalarFieldEnum = (typeof SelectedAnswerOptionsScalarFieldEnum)[keyof typeof SelectedAnswerOptionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Roles'
   */
  export type EnumRolesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Roles'>
    


  /**
   * Reference to a field of type 'Roles[]'
   */
  export type ListEnumRolesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Roles[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'QuestionType'
   */
  export type EnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType'>
    


  /**
   * Reference to a field of type 'QuestionType[]'
   */
  export type ListEnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    position?: StringNullableFilter<"User"> | string | null
    first_name?: StringNullableFilter<"User"> | string | null
    last_name?: StringNullableFilter<"User"> | string | null
    role?: EnumRolesFilter<"User"> | $Enums.Roles
    is_email_verified?: BoolFilter<"User"> | boolean
    company?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    birth_date?: DateTimeNullableFilter<"User"> | Date | string | null
    phone_number?: StringNullableFilter<"User"> | string | null
    skype?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    fileName?: StringNullableFilter<"User"> | string | null
    level?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    MemberInvitations?: MemberInvitationsListRelationFilter
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    position?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    last_name?: SortOrderInput | SortOrder
    role?: SortOrder
    is_email_verified?: SortOrder
    company?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    birth_date?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    skype?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrder
    fileName?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    MemberInvitations?: MemberInvitationsOrderByRelationAggregateInput
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    phone_number?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    position?: StringNullableFilter<"User"> | string | null
    first_name?: StringNullableFilter<"User"> | string | null
    last_name?: StringNullableFilter<"User"> | string | null
    role?: EnumRolesFilter<"User"> | $Enums.Roles
    is_email_verified?: BoolFilter<"User"> | boolean
    company?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    birth_date?: DateTimeNullableFilter<"User"> | Date | string | null
    skype?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    fileName?: StringNullableFilter<"User"> | string | null
    level?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    MemberInvitations?: MemberInvitationsListRelationFilter
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersListRelationFilter
  }, "id" | "phone_number" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    position?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    last_name?: SortOrderInput | SortOrder
    role?: SortOrder
    is_email_verified?: SortOrder
    company?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    birth_date?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    skype?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrder
    fileName?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    position?: StringNullableWithAggregatesFilter<"User"> | string | null
    first_name?: StringNullableWithAggregatesFilter<"User"> | string | null
    last_name?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRolesWithAggregatesFilter<"User"> | $Enums.Roles
    is_email_verified?: BoolWithAggregatesFilter<"User"> | boolean
    company?: StringNullableWithAggregatesFilter<"User"> | string | null
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    birth_date?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    phone_number?: StringNullableWithAggregatesFilter<"User"> | string | null
    skype?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    fileName?: StringNullableWithAggregatesFilter<"User"> | string | null
    level?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MemberInvitationsWhereInput = {
    AND?: MemberInvitationsWhereInput | MemberInvitationsWhereInput[]
    OR?: MemberInvitationsWhereInput[]
    NOT?: MemberInvitationsWhereInput | MemberInvitationsWhereInput[]
    id?: StringFilter<"MemberInvitations"> | string
    email?: StringFilter<"MemberInvitations"> | string
    invited_by_user_id?: StringFilter<"MemberInvitations"> | string
    invitation_token?: StringFilter<"MemberInvitations"> | string
    status?: EnumStatusFilter<"MemberInvitations"> | $Enums.Status
    expires_at?: DateTimeFilter<"MemberInvitations"> | Date | string
    sent_at?: DateTimeFilter<"MemberInvitations"> | Date | string
    accepted_at?: DateTimeNullableFilter<"MemberInvitations"> | Date | string | null
    Users?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MemberInvitationsOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    invited_by_user_id?: SortOrder
    invitation_token?: SortOrder
    status?: SortOrder
    expires_at?: SortOrder
    sent_at?: SortOrder
    accepted_at?: SortOrderInput | SortOrder
    Users?: UserOrderByWithRelationInput
  }

  export type MemberInvitationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MemberInvitationsWhereInput | MemberInvitationsWhereInput[]
    OR?: MemberInvitationsWhereInput[]
    NOT?: MemberInvitationsWhereInput | MemberInvitationsWhereInput[]
    email?: StringFilter<"MemberInvitations"> | string
    invited_by_user_id?: StringFilter<"MemberInvitations"> | string
    invitation_token?: StringFilter<"MemberInvitations"> | string
    status?: EnumStatusFilter<"MemberInvitations"> | $Enums.Status
    expires_at?: DateTimeFilter<"MemberInvitations"> | Date | string
    sent_at?: DateTimeFilter<"MemberInvitations"> | Date | string
    accepted_at?: DateTimeNullableFilter<"MemberInvitations"> | Date | string | null
    Users?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MemberInvitationsOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    invited_by_user_id?: SortOrder
    invitation_token?: SortOrder
    status?: SortOrder
    expires_at?: SortOrder
    sent_at?: SortOrder
    accepted_at?: SortOrderInput | SortOrder
    _count?: MemberInvitationsCountOrderByAggregateInput
    _max?: MemberInvitationsMaxOrderByAggregateInput
    _min?: MemberInvitationsMinOrderByAggregateInput
  }

  export type MemberInvitationsScalarWhereWithAggregatesInput = {
    AND?: MemberInvitationsScalarWhereWithAggregatesInput | MemberInvitationsScalarWhereWithAggregatesInput[]
    OR?: MemberInvitationsScalarWhereWithAggregatesInput[]
    NOT?: MemberInvitationsScalarWhereWithAggregatesInput | MemberInvitationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MemberInvitations"> | string
    email?: StringWithAggregatesFilter<"MemberInvitations"> | string
    invited_by_user_id?: StringWithAggregatesFilter<"MemberInvitations"> | string
    invitation_token?: StringWithAggregatesFilter<"MemberInvitations"> | string
    status?: EnumStatusWithAggregatesFilter<"MemberInvitations"> | $Enums.Status
    expires_at?: DateTimeWithAggregatesFilter<"MemberInvitations"> | Date | string
    sent_at?: DateTimeWithAggregatesFilter<"MemberInvitations"> | Date | string
    accepted_at?: DateTimeNullableWithAggregatesFilter<"MemberInvitations"> | Date | string | null
  }

  export type UserProfileQuestionsWhereInput = {
    AND?: UserProfileQuestionsWhereInput | UserProfileQuestionsWhereInput[]
    OR?: UserProfileQuestionsWhereInput[]
    NOT?: UserProfileQuestionsWhereInput | UserProfileQuestionsWhereInput[]
    id?: StringFilter<"UserProfileQuestions"> | string
    question_text?: StringFilter<"UserProfileQuestions"> | string
    question_type?: EnumQuestionTypeFilter<"UserProfileQuestions"> | $Enums.QuestionType
    is_required?: BoolFilter<"UserProfileQuestions"> | boolean
    step_number?: IntFilter<"UserProfileQuestions"> | number
    order_number?: IntNullableFilter<"UserProfileQuestions"> | number | null
    options?: QuestionOptionsListRelationFilter
    answer?: UserProfileQuestionAnswersListRelationFilter
  }

  export type UserProfileQuestionsOrderByWithRelationInput = {
    id?: SortOrder
    question_text?: SortOrder
    question_type?: SortOrder
    is_required?: SortOrder
    step_number?: SortOrder
    order_number?: SortOrderInput | SortOrder
    options?: QuestionOptionsOrderByRelationAggregateInput
    answer?: UserProfileQuestionAnswersOrderByRelationAggregateInput
  }

  export type UserProfileQuestionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    question_text?: string
    AND?: UserProfileQuestionsWhereInput | UserProfileQuestionsWhereInput[]
    OR?: UserProfileQuestionsWhereInput[]
    NOT?: UserProfileQuestionsWhereInput | UserProfileQuestionsWhereInput[]
    question_type?: EnumQuestionTypeFilter<"UserProfileQuestions"> | $Enums.QuestionType
    is_required?: BoolFilter<"UserProfileQuestions"> | boolean
    step_number?: IntFilter<"UserProfileQuestions"> | number
    order_number?: IntNullableFilter<"UserProfileQuestions"> | number | null
    options?: QuestionOptionsListRelationFilter
    answer?: UserProfileQuestionAnswersListRelationFilter
  }, "id" | "question_text">

  export type UserProfileQuestionsOrderByWithAggregationInput = {
    id?: SortOrder
    question_text?: SortOrder
    question_type?: SortOrder
    is_required?: SortOrder
    step_number?: SortOrder
    order_number?: SortOrderInput | SortOrder
    _count?: UserProfileQuestionsCountOrderByAggregateInput
    _avg?: UserProfileQuestionsAvgOrderByAggregateInput
    _max?: UserProfileQuestionsMaxOrderByAggregateInput
    _min?: UserProfileQuestionsMinOrderByAggregateInput
    _sum?: UserProfileQuestionsSumOrderByAggregateInput
  }

  export type UserProfileQuestionsScalarWhereWithAggregatesInput = {
    AND?: UserProfileQuestionsScalarWhereWithAggregatesInput | UserProfileQuestionsScalarWhereWithAggregatesInput[]
    OR?: UserProfileQuestionsScalarWhereWithAggregatesInput[]
    NOT?: UserProfileQuestionsScalarWhereWithAggregatesInput | UserProfileQuestionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfileQuestions"> | string
    question_text?: StringWithAggregatesFilter<"UserProfileQuestions"> | string
    question_type?: EnumQuestionTypeWithAggregatesFilter<"UserProfileQuestions"> | $Enums.QuestionType
    is_required?: BoolWithAggregatesFilter<"UserProfileQuestions"> | boolean
    step_number?: IntWithAggregatesFilter<"UserProfileQuestions"> | number
    order_number?: IntNullableWithAggregatesFilter<"UserProfileQuestions"> | number | null
  }

  export type QuestionOptionsWhereInput = {
    AND?: QuestionOptionsWhereInput | QuestionOptionsWhereInput[]
    OR?: QuestionOptionsWhereInput[]
    NOT?: QuestionOptionsWhereInput | QuestionOptionsWhereInput[]
    id?: StringFilter<"QuestionOptions"> | string
    question_id?: StringFilter<"QuestionOptions"> | string
    option_text?: StringFilter<"QuestionOptions"> | string
    option_value?: StringFilter<"QuestionOptions"> | string
    order_number?: IntNullableFilter<"QuestionOptions"> | number | null
    question?: XOR<UserProfileQuestionsScalarRelationFilter, UserProfileQuestionsWhereInput>
  }

  export type QuestionOptionsOrderByWithRelationInput = {
    id?: SortOrder
    question_id?: SortOrder
    option_text?: SortOrder
    option_value?: SortOrder
    order_number?: SortOrderInput | SortOrder
    question?: UserProfileQuestionsOrderByWithRelationInput
  }

  export type QuestionOptionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionOptionsWhereInput | QuestionOptionsWhereInput[]
    OR?: QuestionOptionsWhereInput[]
    NOT?: QuestionOptionsWhereInput | QuestionOptionsWhereInput[]
    question_id?: StringFilter<"QuestionOptions"> | string
    option_text?: StringFilter<"QuestionOptions"> | string
    option_value?: StringFilter<"QuestionOptions"> | string
    order_number?: IntNullableFilter<"QuestionOptions"> | number | null
    question?: XOR<UserProfileQuestionsScalarRelationFilter, UserProfileQuestionsWhereInput>
  }, "id">

  export type QuestionOptionsOrderByWithAggregationInput = {
    id?: SortOrder
    question_id?: SortOrder
    option_text?: SortOrder
    option_value?: SortOrder
    order_number?: SortOrderInput | SortOrder
    _count?: QuestionOptionsCountOrderByAggregateInput
    _avg?: QuestionOptionsAvgOrderByAggregateInput
    _max?: QuestionOptionsMaxOrderByAggregateInput
    _min?: QuestionOptionsMinOrderByAggregateInput
    _sum?: QuestionOptionsSumOrderByAggregateInput
  }

  export type QuestionOptionsScalarWhereWithAggregatesInput = {
    AND?: QuestionOptionsScalarWhereWithAggregatesInput | QuestionOptionsScalarWhereWithAggregatesInput[]
    OR?: QuestionOptionsScalarWhereWithAggregatesInput[]
    NOT?: QuestionOptionsScalarWhereWithAggregatesInput | QuestionOptionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionOptions"> | string
    question_id?: StringWithAggregatesFilter<"QuestionOptions"> | string
    option_text?: StringWithAggregatesFilter<"QuestionOptions"> | string
    option_value?: StringWithAggregatesFilter<"QuestionOptions"> | string
    order_number?: IntNullableWithAggregatesFilter<"QuestionOptions"> | number | null
  }

  export type UserProfileQuestionAnswersWhereInput = {
    AND?: UserProfileQuestionAnswersWhereInput | UserProfileQuestionAnswersWhereInput[]
    OR?: UserProfileQuestionAnswersWhereInput[]
    NOT?: UserProfileQuestionAnswersWhereInput | UserProfileQuestionAnswersWhereInput[]
    id?: StringFilter<"UserProfileQuestionAnswers"> | string
    question_id?: StringFilter<"UserProfileQuestionAnswers"> | string
    answer_text?: StringNullableFilter<"UserProfileQuestionAnswers"> | string | null
    user_id?: StringFilter<"UserProfileQuestionAnswers"> | string
    question?: XOR<UserProfileQuestionsScalarRelationFilter, UserProfileQuestionsWhereInput>
    answer_options?: SelectedAnswerOptionsListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserProfileQuestionAnswersOrderByWithRelationInput = {
    id?: SortOrder
    question_id?: SortOrder
    answer_text?: SortOrderInput | SortOrder
    user_id?: SortOrder
    question?: UserProfileQuestionsOrderByWithRelationInput
    answer_options?: SelectedAnswerOptionsOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type UserProfileQuestionAnswersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    question_id?: string
    question_id_user_id?: UserProfileQuestionAnswersQuestion_idUser_idCompoundUniqueInput
    AND?: UserProfileQuestionAnswersWhereInput | UserProfileQuestionAnswersWhereInput[]
    OR?: UserProfileQuestionAnswersWhereInput[]
    NOT?: UserProfileQuestionAnswersWhereInput | UserProfileQuestionAnswersWhereInput[]
    answer_text?: StringNullableFilter<"UserProfileQuestionAnswers"> | string | null
    user_id?: StringFilter<"UserProfileQuestionAnswers"> | string
    question?: XOR<UserProfileQuestionsScalarRelationFilter, UserProfileQuestionsWhereInput>
    answer_options?: SelectedAnswerOptionsListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "question_id" | "question_id_user_id">

  export type UserProfileQuestionAnswersOrderByWithAggregationInput = {
    id?: SortOrder
    question_id?: SortOrder
    answer_text?: SortOrderInput | SortOrder
    user_id?: SortOrder
    _count?: UserProfileQuestionAnswersCountOrderByAggregateInput
    _max?: UserProfileQuestionAnswersMaxOrderByAggregateInput
    _min?: UserProfileQuestionAnswersMinOrderByAggregateInput
  }

  export type UserProfileQuestionAnswersScalarWhereWithAggregatesInput = {
    AND?: UserProfileQuestionAnswersScalarWhereWithAggregatesInput | UserProfileQuestionAnswersScalarWhereWithAggregatesInput[]
    OR?: UserProfileQuestionAnswersScalarWhereWithAggregatesInput[]
    NOT?: UserProfileQuestionAnswersScalarWhereWithAggregatesInput | UserProfileQuestionAnswersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfileQuestionAnswers"> | string
    question_id?: StringWithAggregatesFilter<"UserProfileQuestionAnswers"> | string
    answer_text?: StringNullableWithAggregatesFilter<"UserProfileQuestionAnswers"> | string | null
    user_id?: StringWithAggregatesFilter<"UserProfileQuestionAnswers"> | string
  }

  export type SelectedAnswerOptionsWhereInput = {
    AND?: SelectedAnswerOptionsWhereInput | SelectedAnswerOptionsWhereInput[]
    OR?: SelectedAnswerOptionsWhereInput[]
    NOT?: SelectedAnswerOptionsWhereInput | SelectedAnswerOptionsWhereInput[]
    id?: StringFilter<"SelectedAnswerOptions"> | string
    answer_id?: StringFilter<"SelectedAnswerOptions"> | string
    option_id?: StringFilter<"SelectedAnswerOptions"> | string
    answer?: XOR<UserProfileQuestionAnswersScalarRelationFilter, UserProfileQuestionAnswersWhereInput>
  }

  export type SelectedAnswerOptionsOrderByWithRelationInput = {
    id?: SortOrder
    answer_id?: SortOrder
    option_id?: SortOrder
    answer?: UserProfileQuestionAnswersOrderByWithRelationInput
  }

  export type SelectedAnswerOptionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    answer_id_option_id?: SelectedAnswerOptionsAnswer_idOption_idCompoundUniqueInput
    AND?: SelectedAnswerOptionsWhereInput | SelectedAnswerOptionsWhereInput[]
    OR?: SelectedAnswerOptionsWhereInput[]
    NOT?: SelectedAnswerOptionsWhereInput | SelectedAnswerOptionsWhereInput[]
    answer_id?: StringFilter<"SelectedAnswerOptions"> | string
    option_id?: StringFilter<"SelectedAnswerOptions"> | string
    answer?: XOR<UserProfileQuestionAnswersScalarRelationFilter, UserProfileQuestionAnswersWhereInput>
  }, "id" | "answer_id_option_id">

  export type SelectedAnswerOptionsOrderByWithAggregationInput = {
    id?: SortOrder
    answer_id?: SortOrder
    option_id?: SortOrder
    _count?: SelectedAnswerOptionsCountOrderByAggregateInput
    _max?: SelectedAnswerOptionsMaxOrderByAggregateInput
    _min?: SelectedAnswerOptionsMinOrderByAggregateInput
  }

  export type SelectedAnswerOptionsScalarWhereWithAggregatesInput = {
    AND?: SelectedAnswerOptionsScalarWhereWithAggregatesInput | SelectedAnswerOptionsScalarWhereWithAggregatesInput[]
    OR?: SelectedAnswerOptionsScalarWhereWithAggregatesInput[]
    NOT?: SelectedAnswerOptionsScalarWhereWithAggregatesInput | SelectedAnswerOptionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SelectedAnswerOptions"> | string
    answer_id?: StringWithAggregatesFilter<"SelectedAnswerOptions"> | string
    option_id?: StringWithAggregatesFilter<"SelectedAnswerOptions"> | string
  }

  export type UserCreateInput = {
    id?: string
    position?: string | null
    first_name?: string | null
    last_name?: string | null
    role?: $Enums.Roles
    is_email_verified?: boolean
    company?: string | null
    location?: string | null
    birth_date?: Date | string | null
    phone_number?: string | null
    skype?: string | null
    email?: string | null
    username?: string | null
    password: string
    fileName?: string | null
    level?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    MemberInvitations?: MemberInvitationsCreateNestedManyWithoutUsersInput
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    position?: string | null
    first_name?: string | null
    last_name?: string | null
    role?: $Enums.Roles
    is_email_verified?: boolean
    company?: string | null
    location?: string | null
    birth_date?: Date | string | null
    phone_number?: string | null
    skype?: string | null
    email?: string | null
    username?: string | null
    password: string
    fileName?: string | null
    level?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    MemberInvitations?: MemberInvitationsUncheckedCreateNestedManyWithoutUsersInput
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    skype?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    MemberInvitations?: MemberInvitationsUpdateManyWithoutUsersNestedInput
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    skype?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    MemberInvitations?: MemberInvitationsUncheckedUpdateManyWithoutUsersNestedInput
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    position?: string | null
    first_name?: string | null
    last_name?: string | null
    role?: $Enums.Roles
    is_email_verified?: boolean
    company?: string | null
    location?: string | null
    birth_date?: Date | string | null
    phone_number?: string | null
    skype?: string | null
    email?: string | null
    username?: string | null
    password: string
    fileName?: string | null
    level?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    skype?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    skype?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberInvitationsCreateInput = {
    id?: string
    email: string
    invitation_token: string
    status?: $Enums.Status
    expires_at: Date | string
    sent_at?: Date | string
    accepted_at?: Date | string | null
    Users: UserCreateNestedOneWithoutMemberInvitationsInput
  }

  export type MemberInvitationsUncheckedCreateInput = {
    id?: string
    email: string
    invited_by_user_id: string
    invitation_token: string
    status?: $Enums.Status
    expires_at: Date | string
    sent_at?: Date | string
    accepted_at?: Date | string | null
  }

  export type MemberInvitationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    invitation_token?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Users?: UserUpdateOneRequiredWithoutMemberInvitationsNestedInput
  }

  export type MemberInvitationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    invited_by_user_id?: StringFieldUpdateOperationsInput | string
    invitation_token?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MemberInvitationsCreateManyInput = {
    id?: string
    email: string
    invited_by_user_id: string
    invitation_token: string
    status?: $Enums.Status
    expires_at: Date | string
    sent_at?: Date | string
    accepted_at?: Date | string | null
  }

  export type MemberInvitationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    invitation_token?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MemberInvitationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    invited_by_user_id?: StringFieldUpdateOperationsInput | string
    invitation_token?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserProfileQuestionsCreateInput = {
    id?: string
    question_text: string
    question_type: $Enums.QuestionType
    is_required?: boolean
    step_number: number
    order_number?: number | null
    options?: QuestionOptionsCreateNestedManyWithoutQuestionInput
    answer?: UserProfileQuestionAnswersCreateNestedManyWithoutQuestionInput
  }

  export type UserProfileQuestionsUncheckedCreateInput = {
    id?: string
    question_text: string
    question_type: $Enums.QuestionType
    is_required?: boolean
    step_number: number
    order_number?: number | null
    options?: QuestionOptionsUncheckedCreateNestedManyWithoutQuestionInput
    answer?: UserProfileQuestionAnswersUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type UserProfileQuestionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    is_required?: BoolFieldUpdateOperationsInput | boolean
    step_number?: IntFieldUpdateOperationsInput | number
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    options?: QuestionOptionsUpdateManyWithoutQuestionNestedInput
    answer?: UserProfileQuestionAnswersUpdateManyWithoutQuestionNestedInput
  }

  export type UserProfileQuestionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    is_required?: BoolFieldUpdateOperationsInput | boolean
    step_number?: IntFieldUpdateOperationsInput | number
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    options?: QuestionOptionsUncheckedUpdateManyWithoutQuestionNestedInput
    answer?: UserProfileQuestionAnswersUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type UserProfileQuestionsCreateManyInput = {
    id?: string
    question_text: string
    question_type: $Enums.QuestionType
    is_required?: boolean
    step_number: number
    order_number?: number | null
  }

  export type UserProfileQuestionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    is_required?: BoolFieldUpdateOperationsInput | boolean
    step_number?: IntFieldUpdateOperationsInput | number
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserProfileQuestionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    is_required?: BoolFieldUpdateOperationsInput | boolean
    step_number?: IntFieldUpdateOperationsInput | number
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionOptionsCreateInput = {
    id?: string
    option_text: string
    option_value: string
    order_number?: number | null
    question: UserProfileQuestionsCreateNestedOneWithoutOptionsInput
  }

  export type QuestionOptionsUncheckedCreateInput = {
    id?: string
    question_id: string
    option_text: string
    option_value: string
    order_number?: number | null
  }

  export type QuestionOptionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_text?: StringFieldUpdateOperationsInput | string
    option_value?: StringFieldUpdateOperationsInput | string
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    question?: UserProfileQuestionsUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type QuestionOptionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    option_text?: StringFieldUpdateOperationsInput | string
    option_value?: StringFieldUpdateOperationsInput | string
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionOptionsCreateManyInput = {
    id?: string
    question_id: string
    option_text: string
    option_value: string
    order_number?: number | null
  }

  export type QuestionOptionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_text?: StringFieldUpdateOperationsInput | string
    option_value?: StringFieldUpdateOperationsInput | string
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionOptionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    option_text?: StringFieldUpdateOperationsInput | string
    option_value?: StringFieldUpdateOperationsInput | string
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserProfileQuestionAnswersCreateInput = {
    id?: string
    answer_text?: string | null
    question: UserProfileQuestionsCreateNestedOneWithoutAnswerInput
    answer_options?: SelectedAnswerOptionsCreateNestedManyWithoutAnswerInput
    user: UserCreateNestedOneWithoutUserProfileQuestionAnswersInput
  }

  export type UserProfileQuestionAnswersUncheckedCreateInput = {
    id?: string
    question_id: string
    answer_text?: string | null
    user_id: string
    answer_options?: SelectedAnswerOptionsUncheckedCreateNestedManyWithoutAnswerInput
  }

  export type UserProfileQuestionAnswersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    question?: UserProfileQuestionsUpdateOneRequiredWithoutAnswerNestedInput
    answer_options?: SelectedAnswerOptionsUpdateManyWithoutAnswerNestedInput
    user?: UserUpdateOneRequiredWithoutUserProfileQuestionAnswersNestedInput
  }

  export type UserProfileQuestionAnswersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    answer_options?: SelectedAnswerOptionsUncheckedUpdateManyWithoutAnswerNestedInput
  }

  export type UserProfileQuestionAnswersCreateManyInput = {
    id?: string
    question_id: string
    answer_text?: string | null
    user_id: string
  }

  export type UserProfileQuestionAnswersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserProfileQuestionAnswersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedAnswerOptionsCreateInput = {
    id?: string
    option_id: string
    answer: UserProfileQuestionAnswersCreateNestedOneWithoutAnswer_optionsInput
  }

  export type SelectedAnswerOptionsUncheckedCreateInput = {
    id?: string
    answer_id: string
    option_id: string
  }

  export type SelectedAnswerOptionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_id?: StringFieldUpdateOperationsInput | string
    answer?: UserProfileQuestionAnswersUpdateOneRequiredWithoutAnswer_optionsNestedInput
  }

  export type SelectedAnswerOptionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_id?: StringFieldUpdateOperationsInput | string
    option_id?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedAnswerOptionsCreateManyInput = {
    id?: string
    answer_id: string
    option_id: string
  }

  export type SelectedAnswerOptionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_id?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedAnswerOptionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_id?: StringFieldUpdateOperationsInput | string
    option_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRolesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesFilter<$PrismaModel> | $Enums.Roles
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MemberInvitationsListRelationFilter = {
    every?: MemberInvitationsWhereInput
    some?: MemberInvitationsWhereInput
    none?: MemberInvitationsWhereInput
  }

  export type UserProfileQuestionAnswersListRelationFilter = {
    every?: UserProfileQuestionAnswersWhereInput
    some?: UserProfileQuestionAnswersWhereInput
    none?: UserProfileQuestionAnswersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MemberInvitationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserProfileQuestionAnswersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    role?: SortOrder
    is_email_verified?: SortOrder
    company?: SortOrder
    location?: SortOrder
    birth_date?: SortOrder
    phone_number?: SortOrder
    skype?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    fileName?: SortOrder
    level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    role?: SortOrder
    is_email_verified?: SortOrder
    company?: SortOrder
    location?: SortOrder
    birth_date?: SortOrder
    phone_number?: SortOrder
    skype?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    fileName?: SortOrder
    level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    role?: SortOrder
    is_email_verified?: SortOrder
    company?: SortOrder
    location?: SortOrder
    birth_date?: SortOrder
    phone_number?: SortOrder
    skype?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    fileName?: SortOrder
    level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRolesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesWithAggregatesFilter<$PrismaModel> | $Enums.Roles
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolesFilter<$PrismaModel>
    _max?: NestedEnumRolesFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MemberInvitationsCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    invited_by_user_id?: SortOrder
    invitation_token?: SortOrder
    status?: SortOrder
    expires_at?: SortOrder
    sent_at?: SortOrder
    accepted_at?: SortOrder
  }

  export type MemberInvitationsMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    invited_by_user_id?: SortOrder
    invitation_token?: SortOrder
    status?: SortOrder
    expires_at?: SortOrder
    sent_at?: SortOrder
    accepted_at?: SortOrder
  }

  export type MemberInvitationsMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    invited_by_user_id?: SortOrder
    invitation_token?: SortOrder
    status?: SortOrder
    expires_at?: SortOrder
    sent_at?: SortOrder
    accepted_at?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type EnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type QuestionOptionsListRelationFilter = {
    every?: QuestionOptionsWhereInput
    some?: QuestionOptionsWhereInput
    none?: QuestionOptionsWhereInput
  }

  export type QuestionOptionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserProfileQuestionsCountOrderByAggregateInput = {
    id?: SortOrder
    question_text?: SortOrder
    question_type?: SortOrder
    is_required?: SortOrder
    step_number?: SortOrder
    order_number?: SortOrder
  }

  export type UserProfileQuestionsAvgOrderByAggregateInput = {
    step_number?: SortOrder
    order_number?: SortOrder
  }

  export type UserProfileQuestionsMaxOrderByAggregateInput = {
    id?: SortOrder
    question_text?: SortOrder
    question_type?: SortOrder
    is_required?: SortOrder
    step_number?: SortOrder
    order_number?: SortOrder
  }

  export type UserProfileQuestionsMinOrderByAggregateInput = {
    id?: SortOrder
    question_text?: SortOrder
    question_type?: SortOrder
    is_required?: SortOrder
    step_number?: SortOrder
    order_number?: SortOrder
  }

  export type UserProfileQuestionsSumOrderByAggregateInput = {
    step_number?: SortOrder
    order_number?: SortOrder
  }

  export type EnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserProfileQuestionsScalarRelationFilter = {
    is?: UserProfileQuestionsWhereInput
    isNot?: UserProfileQuestionsWhereInput
  }

  export type QuestionOptionsCountOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    option_text?: SortOrder
    option_value?: SortOrder
    order_number?: SortOrder
  }

  export type QuestionOptionsAvgOrderByAggregateInput = {
    order_number?: SortOrder
  }

  export type QuestionOptionsMaxOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    option_text?: SortOrder
    option_value?: SortOrder
    order_number?: SortOrder
  }

  export type QuestionOptionsMinOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    option_text?: SortOrder
    option_value?: SortOrder
    order_number?: SortOrder
  }

  export type QuestionOptionsSumOrderByAggregateInput = {
    order_number?: SortOrder
  }

  export type SelectedAnswerOptionsListRelationFilter = {
    every?: SelectedAnswerOptionsWhereInput
    some?: SelectedAnswerOptionsWhereInput
    none?: SelectedAnswerOptionsWhereInput
  }

  export type SelectedAnswerOptionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserProfileQuestionAnswersQuestion_idUser_idCompoundUniqueInput = {
    question_id: string
    user_id: string
  }

  export type UserProfileQuestionAnswersCountOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    answer_text?: SortOrder
    user_id?: SortOrder
  }

  export type UserProfileQuestionAnswersMaxOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    answer_text?: SortOrder
    user_id?: SortOrder
  }

  export type UserProfileQuestionAnswersMinOrderByAggregateInput = {
    id?: SortOrder
    question_id?: SortOrder
    answer_text?: SortOrder
    user_id?: SortOrder
  }

  export type UserProfileQuestionAnswersScalarRelationFilter = {
    is?: UserProfileQuestionAnswersWhereInput
    isNot?: UserProfileQuestionAnswersWhereInput
  }

  export type SelectedAnswerOptionsAnswer_idOption_idCompoundUniqueInput = {
    answer_id: string
    option_id: string
  }

  export type SelectedAnswerOptionsCountOrderByAggregateInput = {
    id?: SortOrder
    answer_id?: SortOrder
    option_id?: SortOrder
  }

  export type SelectedAnswerOptionsMaxOrderByAggregateInput = {
    id?: SortOrder
    answer_id?: SortOrder
    option_id?: SortOrder
  }

  export type SelectedAnswerOptionsMinOrderByAggregateInput = {
    id?: SortOrder
    answer_id?: SortOrder
    option_id?: SortOrder
  }

  export type MemberInvitationsCreateNestedManyWithoutUsersInput = {
    create?: XOR<MemberInvitationsCreateWithoutUsersInput, MemberInvitationsUncheckedCreateWithoutUsersInput> | MemberInvitationsCreateWithoutUsersInput[] | MemberInvitationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: MemberInvitationsCreateOrConnectWithoutUsersInput | MemberInvitationsCreateOrConnectWithoutUsersInput[]
    createMany?: MemberInvitationsCreateManyUsersInputEnvelope
    connect?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
  }

  export type UserProfileQuestionAnswersCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutUserInput, UserProfileQuestionAnswersUncheckedCreateWithoutUserInput> | UserProfileQuestionAnswersCreateWithoutUserInput[] | UserProfileQuestionAnswersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutUserInput | UserProfileQuestionAnswersCreateOrConnectWithoutUserInput[]
    createMany?: UserProfileQuestionAnswersCreateManyUserInputEnvelope
    connect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
  }

  export type MemberInvitationsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<MemberInvitationsCreateWithoutUsersInput, MemberInvitationsUncheckedCreateWithoutUsersInput> | MemberInvitationsCreateWithoutUsersInput[] | MemberInvitationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: MemberInvitationsCreateOrConnectWithoutUsersInput | MemberInvitationsCreateOrConnectWithoutUsersInput[]
    createMany?: MemberInvitationsCreateManyUsersInputEnvelope
    connect?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
  }

  export type UserProfileQuestionAnswersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutUserInput, UserProfileQuestionAnswersUncheckedCreateWithoutUserInput> | UserProfileQuestionAnswersCreateWithoutUserInput[] | UserProfileQuestionAnswersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutUserInput | UserProfileQuestionAnswersCreateOrConnectWithoutUserInput[]
    createMany?: UserProfileQuestionAnswersCreateManyUserInputEnvelope
    connect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRolesFieldUpdateOperationsInput = {
    set?: $Enums.Roles
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MemberInvitationsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<MemberInvitationsCreateWithoutUsersInput, MemberInvitationsUncheckedCreateWithoutUsersInput> | MemberInvitationsCreateWithoutUsersInput[] | MemberInvitationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: MemberInvitationsCreateOrConnectWithoutUsersInput | MemberInvitationsCreateOrConnectWithoutUsersInput[]
    upsert?: MemberInvitationsUpsertWithWhereUniqueWithoutUsersInput | MemberInvitationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: MemberInvitationsCreateManyUsersInputEnvelope
    set?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
    disconnect?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
    delete?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
    connect?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
    update?: MemberInvitationsUpdateWithWhereUniqueWithoutUsersInput | MemberInvitationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: MemberInvitationsUpdateManyWithWhereWithoutUsersInput | MemberInvitationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: MemberInvitationsScalarWhereInput | MemberInvitationsScalarWhereInput[]
  }

  export type UserProfileQuestionAnswersUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutUserInput, UserProfileQuestionAnswersUncheckedCreateWithoutUserInput> | UserProfileQuestionAnswersCreateWithoutUserInput[] | UserProfileQuestionAnswersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutUserInput | UserProfileQuestionAnswersCreateOrConnectWithoutUserInput[]
    upsert?: UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutUserInput | UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProfileQuestionAnswersCreateManyUserInputEnvelope
    set?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    disconnect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    delete?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    connect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    update?: UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutUserInput | UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProfileQuestionAnswersUpdateManyWithWhereWithoutUserInput | UserProfileQuestionAnswersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProfileQuestionAnswersScalarWhereInput | UserProfileQuestionAnswersScalarWhereInput[]
  }

  export type MemberInvitationsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<MemberInvitationsCreateWithoutUsersInput, MemberInvitationsUncheckedCreateWithoutUsersInput> | MemberInvitationsCreateWithoutUsersInput[] | MemberInvitationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: MemberInvitationsCreateOrConnectWithoutUsersInput | MemberInvitationsCreateOrConnectWithoutUsersInput[]
    upsert?: MemberInvitationsUpsertWithWhereUniqueWithoutUsersInput | MemberInvitationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: MemberInvitationsCreateManyUsersInputEnvelope
    set?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
    disconnect?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
    delete?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
    connect?: MemberInvitationsWhereUniqueInput | MemberInvitationsWhereUniqueInput[]
    update?: MemberInvitationsUpdateWithWhereUniqueWithoutUsersInput | MemberInvitationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: MemberInvitationsUpdateManyWithWhereWithoutUsersInput | MemberInvitationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: MemberInvitationsScalarWhereInput | MemberInvitationsScalarWhereInput[]
  }

  export type UserProfileQuestionAnswersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutUserInput, UserProfileQuestionAnswersUncheckedCreateWithoutUserInput> | UserProfileQuestionAnswersCreateWithoutUserInput[] | UserProfileQuestionAnswersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutUserInput | UserProfileQuestionAnswersCreateOrConnectWithoutUserInput[]
    upsert?: UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutUserInput | UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProfileQuestionAnswersCreateManyUserInputEnvelope
    set?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    disconnect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    delete?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    connect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    update?: UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutUserInput | UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProfileQuestionAnswersUpdateManyWithWhereWithoutUserInput | UserProfileQuestionAnswersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProfileQuestionAnswersScalarWhereInput | UserProfileQuestionAnswersScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMemberInvitationsInput = {
    create?: XOR<UserCreateWithoutMemberInvitationsInput, UserUncheckedCreateWithoutMemberInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UserUpdateOneRequiredWithoutMemberInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutMemberInvitationsInput, UserUncheckedCreateWithoutMemberInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberInvitationsInput
    upsert?: UserUpsertWithoutMemberInvitationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMemberInvitationsInput, UserUpdateWithoutMemberInvitationsInput>, UserUncheckedUpdateWithoutMemberInvitationsInput>
  }

  export type QuestionOptionsCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionOptionsCreateWithoutQuestionInput, QuestionOptionsUncheckedCreateWithoutQuestionInput> | QuestionOptionsCreateWithoutQuestionInput[] | QuestionOptionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionsCreateOrConnectWithoutQuestionInput | QuestionOptionsCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionOptionsCreateManyQuestionInputEnvelope
    connect?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
  }

  export type UserProfileQuestionAnswersCreateNestedManyWithoutQuestionInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutQuestionInput, UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput> | UserProfileQuestionAnswersCreateWithoutQuestionInput[] | UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput | UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput[]
    createMany?: UserProfileQuestionAnswersCreateManyQuestionInputEnvelope
    connect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
  }

  export type QuestionOptionsUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionOptionsCreateWithoutQuestionInput, QuestionOptionsUncheckedCreateWithoutQuestionInput> | QuestionOptionsCreateWithoutQuestionInput[] | QuestionOptionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionsCreateOrConnectWithoutQuestionInput | QuestionOptionsCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionOptionsCreateManyQuestionInputEnvelope
    connect?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
  }

  export type UserProfileQuestionAnswersUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutQuestionInput, UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput> | UserProfileQuestionAnswersCreateWithoutQuestionInput[] | UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput | UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput[]
    createMany?: UserProfileQuestionAnswersCreateManyQuestionInputEnvelope
    connect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
  }

  export type EnumQuestionTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type QuestionOptionsUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionOptionsCreateWithoutQuestionInput, QuestionOptionsUncheckedCreateWithoutQuestionInput> | QuestionOptionsCreateWithoutQuestionInput[] | QuestionOptionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionsCreateOrConnectWithoutQuestionInput | QuestionOptionsCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionOptionsUpsertWithWhereUniqueWithoutQuestionInput | QuestionOptionsUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionOptionsCreateManyQuestionInputEnvelope
    set?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
    disconnect?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
    delete?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
    connect?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
    update?: QuestionOptionsUpdateWithWhereUniqueWithoutQuestionInput | QuestionOptionsUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionOptionsUpdateManyWithWhereWithoutQuestionInput | QuestionOptionsUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionOptionsScalarWhereInput | QuestionOptionsScalarWhereInput[]
  }

  export type UserProfileQuestionAnswersUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutQuestionInput, UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput> | UserProfileQuestionAnswersCreateWithoutQuestionInput[] | UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput | UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput[]
    upsert?: UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutQuestionInput | UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: UserProfileQuestionAnswersCreateManyQuestionInputEnvelope
    set?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    disconnect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    delete?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    connect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    update?: UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutQuestionInput | UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: UserProfileQuestionAnswersUpdateManyWithWhereWithoutQuestionInput | UserProfileQuestionAnswersUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: UserProfileQuestionAnswersScalarWhereInput | UserProfileQuestionAnswersScalarWhereInput[]
  }

  export type QuestionOptionsUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionOptionsCreateWithoutQuestionInput, QuestionOptionsUncheckedCreateWithoutQuestionInput> | QuestionOptionsCreateWithoutQuestionInput[] | QuestionOptionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionsCreateOrConnectWithoutQuestionInput | QuestionOptionsCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionOptionsUpsertWithWhereUniqueWithoutQuestionInput | QuestionOptionsUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionOptionsCreateManyQuestionInputEnvelope
    set?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
    disconnect?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
    delete?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
    connect?: QuestionOptionsWhereUniqueInput | QuestionOptionsWhereUniqueInput[]
    update?: QuestionOptionsUpdateWithWhereUniqueWithoutQuestionInput | QuestionOptionsUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionOptionsUpdateManyWithWhereWithoutQuestionInput | QuestionOptionsUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionOptionsScalarWhereInput | QuestionOptionsScalarWhereInput[]
  }

  export type UserProfileQuestionAnswersUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutQuestionInput, UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput> | UserProfileQuestionAnswersCreateWithoutQuestionInput[] | UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput | UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput[]
    upsert?: UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutQuestionInput | UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: UserProfileQuestionAnswersCreateManyQuestionInputEnvelope
    set?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    disconnect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    delete?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    connect?: UserProfileQuestionAnswersWhereUniqueInput | UserProfileQuestionAnswersWhereUniqueInput[]
    update?: UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutQuestionInput | UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: UserProfileQuestionAnswersUpdateManyWithWhereWithoutQuestionInput | UserProfileQuestionAnswersUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: UserProfileQuestionAnswersScalarWhereInput | UserProfileQuestionAnswersScalarWhereInput[]
  }

  export type UserProfileQuestionsCreateNestedOneWithoutOptionsInput = {
    create?: XOR<UserProfileQuestionsCreateWithoutOptionsInput, UserProfileQuestionsUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: UserProfileQuestionsCreateOrConnectWithoutOptionsInput
    connect?: UserProfileQuestionsWhereUniqueInput
  }

  export type UserProfileQuestionsUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<UserProfileQuestionsCreateWithoutOptionsInput, UserProfileQuestionsUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: UserProfileQuestionsCreateOrConnectWithoutOptionsInput
    upsert?: UserProfileQuestionsUpsertWithoutOptionsInput
    connect?: UserProfileQuestionsWhereUniqueInput
    update?: XOR<XOR<UserProfileQuestionsUpdateToOneWithWhereWithoutOptionsInput, UserProfileQuestionsUpdateWithoutOptionsInput>, UserProfileQuestionsUncheckedUpdateWithoutOptionsInput>
  }

  export type UserProfileQuestionsCreateNestedOneWithoutAnswerInput = {
    create?: XOR<UserProfileQuestionsCreateWithoutAnswerInput, UserProfileQuestionsUncheckedCreateWithoutAnswerInput>
    connectOrCreate?: UserProfileQuestionsCreateOrConnectWithoutAnswerInput
    connect?: UserProfileQuestionsWhereUniqueInput
  }

  export type SelectedAnswerOptionsCreateNestedManyWithoutAnswerInput = {
    create?: XOR<SelectedAnswerOptionsCreateWithoutAnswerInput, SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput> | SelectedAnswerOptionsCreateWithoutAnswerInput[] | SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput[]
    connectOrCreate?: SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput | SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput[]
    createMany?: SelectedAnswerOptionsCreateManyAnswerInputEnvelope
    connect?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutUserProfileQuestionAnswersInput = {
    create?: XOR<UserCreateWithoutUserProfileQuestionAnswersInput, UserUncheckedCreateWithoutUserProfileQuestionAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProfileQuestionAnswersInput
    connect?: UserWhereUniqueInput
  }

  export type SelectedAnswerOptionsUncheckedCreateNestedManyWithoutAnswerInput = {
    create?: XOR<SelectedAnswerOptionsCreateWithoutAnswerInput, SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput> | SelectedAnswerOptionsCreateWithoutAnswerInput[] | SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput[]
    connectOrCreate?: SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput | SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput[]
    createMany?: SelectedAnswerOptionsCreateManyAnswerInputEnvelope
    connect?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
  }

  export type UserProfileQuestionsUpdateOneRequiredWithoutAnswerNestedInput = {
    create?: XOR<UserProfileQuestionsCreateWithoutAnswerInput, UserProfileQuestionsUncheckedCreateWithoutAnswerInput>
    connectOrCreate?: UserProfileQuestionsCreateOrConnectWithoutAnswerInput
    upsert?: UserProfileQuestionsUpsertWithoutAnswerInput
    connect?: UserProfileQuestionsWhereUniqueInput
    update?: XOR<XOR<UserProfileQuestionsUpdateToOneWithWhereWithoutAnswerInput, UserProfileQuestionsUpdateWithoutAnswerInput>, UserProfileQuestionsUncheckedUpdateWithoutAnswerInput>
  }

  export type SelectedAnswerOptionsUpdateManyWithoutAnswerNestedInput = {
    create?: XOR<SelectedAnswerOptionsCreateWithoutAnswerInput, SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput> | SelectedAnswerOptionsCreateWithoutAnswerInput[] | SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput[]
    connectOrCreate?: SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput | SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput[]
    upsert?: SelectedAnswerOptionsUpsertWithWhereUniqueWithoutAnswerInput | SelectedAnswerOptionsUpsertWithWhereUniqueWithoutAnswerInput[]
    createMany?: SelectedAnswerOptionsCreateManyAnswerInputEnvelope
    set?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
    disconnect?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
    delete?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
    connect?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
    update?: SelectedAnswerOptionsUpdateWithWhereUniqueWithoutAnswerInput | SelectedAnswerOptionsUpdateWithWhereUniqueWithoutAnswerInput[]
    updateMany?: SelectedAnswerOptionsUpdateManyWithWhereWithoutAnswerInput | SelectedAnswerOptionsUpdateManyWithWhereWithoutAnswerInput[]
    deleteMany?: SelectedAnswerOptionsScalarWhereInput | SelectedAnswerOptionsScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutUserProfileQuestionAnswersNestedInput = {
    create?: XOR<UserCreateWithoutUserProfileQuestionAnswersInput, UserUncheckedCreateWithoutUserProfileQuestionAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProfileQuestionAnswersInput
    upsert?: UserUpsertWithoutUserProfileQuestionAnswersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserProfileQuestionAnswersInput, UserUpdateWithoutUserProfileQuestionAnswersInput>, UserUncheckedUpdateWithoutUserProfileQuestionAnswersInput>
  }

  export type SelectedAnswerOptionsUncheckedUpdateManyWithoutAnswerNestedInput = {
    create?: XOR<SelectedAnswerOptionsCreateWithoutAnswerInput, SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput> | SelectedAnswerOptionsCreateWithoutAnswerInput[] | SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput[]
    connectOrCreate?: SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput | SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput[]
    upsert?: SelectedAnswerOptionsUpsertWithWhereUniqueWithoutAnswerInput | SelectedAnswerOptionsUpsertWithWhereUniqueWithoutAnswerInput[]
    createMany?: SelectedAnswerOptionsCreateManyAnswerInputEnvelope
    set?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
    disconnect?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
    delete?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
    connect?: SelectedAnswerOptionsWhereUniqueInput | SelectedAnswerOptionsWhereUniqueInput[]
    update?: SelectedAnswerOptionsUpdateWithWhereUniqueWithoutAnswerInput | SelectedAnswerOptionsUpdateWithWhereUniqueWithoutAnswerInput[]
    updateMany?: SelectedAnswerOptionsUpdateManyWithWhereWithoutAnswerInput | SelectedAnswerOptionsUpdateManyWithWhereWithoutAnswerInput[]
    deleteMany?: SelectedAnswerOptionsScalarWhereInput | SelectedAnswerOptionsScalarWhereInput[]
  }

  export type UserProfileQuestionAnswersCreateNestedOneWithoutAnswer_optionsInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutAnswer_optionsInput, UserProfileQuestionAnswersUncheckedCreateWithoutAnswer_optionsInput>
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutAnswer_optionsInput
    connect?: UserProfileQuestionAnswersWhereUniqueInput
  }

  export type UserProfileQuestionAnswersUpdateOneRequiredWithoutAnswer_optionsNestedInput = {
    create?: XOR<UserProfileQuestionAnswersCreateWithoutAnswer_optionsInput, UserProfileQuestionAnswersUncheckedCreateWithoutAnswer_optionsInput>
    connectOrCreate?: UserProfileQuestionAnswersCreateOrConnectWithoutAnswer_optionsInput
    upsert?: UserProfileQuestionAnswersUpsertWithoutAnswer_optionsInput
    connect?: UserProfileQuestionAnswersWhereUniqueInput
    update?: XOR<XOR<UserProfileQuestionAnswersUpdateToOneWithWhereWithoutAnswer_optionsInput, UserProfileQuestionAnswersUpdateWithoutAnswer_optionsInput>, UserProfileQuestionAnswersUncheckedUpdateWithoutAnswer_optionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRolesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesFilter<$PrismaModel> | $Enums.Roles
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRolesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesWithAggregatesFilter<$PrismaModel> | $Enums.Roles
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolesFilter<$PrismaModel>
    _max?: NestedEnumRolesFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MemberInvitationsCreateWithoutUsersInput = {
    id?: string
    email: string
    invitation_token: string
    status?: $Enums.Status
    expires_at: Date | string
    sent_at?: Date | string
    accepted_at?: Date | string | null
  }

  export type MemberInvitationsUncheckedCreateWithoutUsersInput = {
    id?: string
    email: string
    invitation_token: string
    status?: $Enums.Status
    expires_at: Date | string
    sent_at?: Date | string
    accepted_at?: Date | string | null
  }

  export type MemberInvitationsCreateOrConnectWithoutUsersInput = {
    where: MemberInvitationsWhereUniqueInput
    create: XOR<MemberInvitationsCreateWithoutUsersInput, MemberInvitationsUncheckedCreateWithoutUsersInput>
  }

  export type MemberInvitationsCreateManyUsersInputEnvelope = {
    data: MemberInvitationsCreateManyUsersInput | MemberInvitationsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileQuestionAnswersCreateWithoutUserInput = {
    id?: string
    answer_text?: string | null
    question: UserProfileQuestionsCreateNestedOneWithoutAnswerInput
    answer_options?: SelectedAnswerOptionsCreateNestedManyWithoutAnswerInput
  }

  export type UserProfileQuestionAnswersUncheckedCreateWithoutUserInput = {
    id?: string
    question_id: string
    answer_text?: string | null
    answer_options?: SelectedAnswerOptionsUncheckedCreateNestedManyWithoutAnswerInput
  }

  export type UserProfileQuestionAnswersCreateOrConnectWithoutUserInput = {
    where: UserProfileQuestionAnswersWhereUniqueInput
    create: XOR<UserProfileQuestionAnswersCreateWithoutUserInput, UserProfileQuestionAnswersUncheckedCreateWithoutUserInput>
  }

  export type UserProfileQuestionAnswersCreateManyUserInputEnvelope = {
    data: UserProfileQuestionAnswersCreateManyUserInput | UserProfileQuestionAnswersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MemberInvitationsUpsertWithWhereUniqueWithoutUsersInput = {
    where: MemberInvitationsWhereUniqueInput
    update: XOR<MemberInvitationsUpdateWithoutUsersInput, MemberInvitationsUncheckedUpdateWithoutUsersInput>
    create: XOR<MemberInvitationsCreateWithoutUsersInput, MemberInvitationsUncheckedCreateWithoutUsersInput>
  }

  export type MemberInvitationsUpdateWithWhereUniqueWithoutUsersInput = {
    where: MemberInvitationsWhereUniqueInput
    data: XOR<MemberInvitationsUpdateWithoutUsersInput, MemberInvitationsUncheckedUpdateWithoutUsersInput>
  }

  export type MemberInvitationsUpdateManyWithWhereWithoutUsersInput = {
    where: MemberInvitationsScalarWhereInput
    data: XOR<MemberInvitationsUpdateManyMutationInput, MemberInvitationsUncheckedUpdateManyWithoutUsersInput>
  }

  export type MemberInvitationsScalarWhereInput = {
    AND?: MemberInvitationsScalarWhereInput | MemberInvitationsScalarWhereInput[]
    OR?: MemberInvitationsScalarWhereInput[]
    NOT?: MemberInvitationsScalarWhereInput | MemberInvitationsScalarWhereInput[]
    id?: StringFilter<"MemberInvitations"> | string
    email?: StringFilter<"MemberInvitations"> | string
    invited_by_user_id?: StringFilter<"MemberInvitations"> | string
    invitation_token?: StringFilter<"MemberInvitations"> | string
    status?: EnumStatusFilter<"MemberInvitations"> | $Enums.Status
    expires_at?: DateTimeFilter<"MemberInvitations"> | Date | string
    sent_at?: DateTimeFilter<"MemberInvitations"> | Date | string
    accepted_at?: DateTimeNullableFilter<"MemberInvitations"> | Date | string | null
  }

  export type UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutUserInput = {
    where: UserProfileQuestionAnswersWhereUniqueInput
    update: XOR<UserProfileQuestionAnswersUpdateWithoutUserInput, UserProfileQuestionAnswersUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileQuestionAnswersCreateWithoutUserInput, UserProfileQuestionAnswersUncheckedCreateWithoutUserInput>
  }

  export type UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutUserInput = {
    where: UserProfileQuestionAnswersWhereUniqueInput
    data: XOR<UserProfileQuestionAnswersUpdateWithoutUserInput, UserProfileQuestionAnswersUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileQuestionAnswersUpdateManyWithWhereWithoutUserInput = {
    where: UserProfileQuestionAnswersScalarWhereInput
    data: XOR<UserProfileQuestionAnswersUpdateManyMutationInput, UserProfileQuestionAnswersUncheckedUpdateManyWithoutUserInput>
  }

  export type UserProfileQuestionAnswersScalarWhereInput = {
    AND?: UserProfileQuestionAnswersScalarWhereInput | UserProfileQuestionAnswersScalarWhereInput[]
    OR?: UserProfileQuestionAnswersScalarWhereInput[]
    NOT?: UserProfileQuestionAnswersScalarWhereInput | UserProfileQuestionAnswersScalarWhereInput[]
    id?: StringFilter<"UserProfileQuestionAnswers"> | string
    question_id?: StringFilter<"UserProfileQuestionAnswers"> | string
    answer_text?: StringNullableFilter<"UserProfileQuestionAnswers"> | string | null
    user_id?: StringFilter<"UserProfileQuestionAnswers"> | string
  }

  export type UserCreateWithoutMemberInvitationsInput = {
    id?: string
    position?: string | null
    first_name?: string | null
    last_name?: string | null
    role?: $Enums.Roles
    is_email_verified?: boolean
    company?: string | null
    location?: string | null
    birth_date?: Date | string | null
    phone_number?: string | null
    skype?: string | null
    email?: string | null
    username?: string | null
    password: string
    fileName?: string | null
    level?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMemberInvitationsInput = {
    id?: string
    position?: string | null
    first_name?: string | null
    last_name?: string | null
    role?: $Enums.Roles
    is_email_verified?: boolean
    company?: string | null
    location?: string | null
    birth_date?: Date | string | null
    phone_number?: string | null
    skype?: string | null
    email?: string | null
    username?: string | null
    password: string
    fileName?: string | null
    level?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMemberInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemberInvitationsInput, UserUncheckedCreateWithoutMemberInvitationsInput>
  }

  export type UserUpsertWithoutMemberInvitationsInput = {
    update: XOR<UserUpdateWithoutMemberInvitationsInput, UserUncheckedUpdateWithoutMemberInvitationsInput>
    create: XOR<UserCreateWithoutMemberInvitationsInput, UserUncheckedCreateWithoutMemberInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMemberInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMemberInvitationsInput, UserUncheckedUpdateWithoutMemberInvitationsInput>
  }

  export type UserUpdateWithoutMemberInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    skype?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMemberInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    skype?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserProfileQuestionAnswers?: UserProfileQuestionAnswersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionOptionsCreateWithoutQuestionInput = {
    id?: string
    option_text: string
    option_value: string
    order_number?: number | null
  }

  export type QuestionOptionsUncheckedCreateWithoutQuestionInput = {
    id?: string
    option_text: string
    option_value: string
    order_number?: number | null
  }

  export type QuestionOptionsCreateOrConnectWithoutQuestionInput = {
    where: QuestionOptionsWhereUniqueInput
    create: XOR<QuestionOptionsCreateWithoutQuestionInput, QuestionOptionsUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionOptionsCreateManyQuestionInputEnvelope = {
    data: QuestionOptionsCreateManyQuestionInput | QuestionOptionsCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileQuestionAnswersCreateWithoutQuestionInput = {
    id?: string
    answer_text?: string | null
    answer_options?: SelectedAnswerOptionsCreateNestedManyWithoutAnswerInput
    user: UserCreateNestedOneWithoutUserProfileQuestionAnswersInput
  }

  export type UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput = {
    id?: string
    answer_text?: string | null
    user_id: string
    answer_options?: SelectedAnswerOptionsUncheckedCreateNestedManyWithoutAnswerInput
  }

  export type UserProfileQuestionAnswersCreateOrConnectWithoutQuestionInput = {
    where: UserProfileQuestionAnswersWhereUniqueInput
    create: XOR<UserProfileQuestionAnswersCreateWithoutQuestionInput, UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput>
  }

  export type UserProfileQuestionAnswersCreateManyQuestionInputEnvelope = {
    data: UserProfileQuestionAnswersCreateManyQuestionInput | UserProfileQuestionAnswersCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionOptionsUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionOptionsWhereUniqueInput
    update: XOR<QuestionOptionsUpdateWithoutQuestionInput, QuestionOptionsUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionOptionsCreateWithoutQuestionInput, QuestionOptionsUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionOptionsUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionOptionsWhereUniqueInput
    data: XOR<QuestionOptionsUpdateWithoutQuestionInput, QuestionOptionsUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionOptionsUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionOptionsScalarWhereInput
    data: XOR<QuestionOptionsUpdateManyMutationInput, QuestionOptionsUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionOptionsScalarWhereInput = {
    AND?: QuestionOptionsScalarWhereInput | QuestionOptionsScalarWhereInput[]
    OR?: QuestionOptionsScalarWhereInput[]
    NOT?: QuestionOptionsScalarWhereInput | QuestionOptionsScalarWhereInput[]
    id?: StringFilter<"QuestionOptions"> | string
    question_id?: StringFilter<"QuestionOptions"> | string
    option_text?: StringFilter<"QuestionOptions"> | string
    option_value?: StringFilter<"QuestionOptions"> | string
    order_number?: IntNullableFilter<"QuestionOptions"> | number | null
  }

  export type UserProfileQuestionAnswersUpsertWithWhereUniqueWithoutQuestionInput = {
    where: UserProfileQuestionAnswersWhereUniqueInput
    update: XOR<UserProfileQuestionAnswersUpdateWithoutQuestionInput, UserProfileQuestionAnswersUncheckedUpdateWithoutQuestionInput>
    create: XOR<UserProfileQuestionAnswersCreateWithoutQuestionInput, UserProfileQuestionAnswersUncheckedCreateWithoutQuestionInput>
  }

  export type UserProfileQuestionAnswersUpdateWithWhereUniqueWithoutQuestionInput = {
    where: UserProfileQuestionAnswersWhereUniqueInput
    data: XOR<UserProfileQuestionAnswersUpdateWithoutQuestionInput, UserProfileQuestionAnswersUncheckedUpdateWithoutQuestionInput>
  }

  export type UserProfileQuestionAnswersUpdateManyWithWhereWithoutQuestionInput = {
    where: UserProfileQuestionAnswersScalarWhereInput
    data: XOR<UserProfileQuestionAnswersUpdateManyMutationInput, UserProfileQuestionAnswersUncheckedUpdateManyWithoutQuestionInput>
  }

  export type UserProfileQuestionsCreateWithoutOptionsInput = {
    id?: string
    question_text: string
    question_type: $Enums.QuestionType
    is_required?: boolean
    step_number: number
    order_number?: number | null
    answer?: UserProfileQuestionAnswersCreateNestedManyWithoutQuestionInput
  }

  export type UserProfileQuestionsUncheckedCreateWithoutOptionsInput = {
    id?: string
    question_text: string
    question_type: $Enums.QuestionType
    is_required?: boolean
    step_number: number
    order_number?: number | null
    answer?: UserProfileQuestionAnswersUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type UserProfileQuestionsCreateOrConnectWithoutOptionsInput = {
    where: UserProfileQuestionsWhereUniqueInput
    create: XOR<UserProfileQuestionsCreateWithoutOptionsInput, UserProfileQuestionsUncheckedCreateWithoutOptionsInput>
  }

  export type UserProfileQuestionsUpsertWithoutOptionsInput = {
    update: XOR<UserProfileQuestionsUpdateWithoutOptionsInput, UserProfileQuestionsUncheckedUpdateWithoutOptionsInput>
    create: XOR<UserProfileQuestionsCreateWithoutOptionsInput, UserProfileQuestionsUncheckedCreateWithoutOptionsInput>
    where?: UserProfileQuestionsWhereInput
  }

  export type UserProfileQuestionsUpdateToOneWithWhereWithoutOptionsInput = {
    where?: UserProfileQuestionsWhereInput
    data: XOR<UserProfileQuestionsUpdateWithoutOptionsInput, UserProfileQuestionsUncheckedUpdateWithoutOptionsInput>
  }

  export type UserProfileQuestionsUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    is_required?: BoolFieldUpdateOperationsInput | boolean
    step_number?: IntFieldUpdateOperationsInput | number
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    answer?: UserProfileQuestionAnswersUpdateManyWithoutQuestionNestedInput
  }

  export type UserProfileQuestionsUncheckedUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    is_required?: BoolFieldUpdateOperationsInput | boolean
    step_number?: IntFieldUpdateOperationsInput | number
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    answer?: UserProfileQuestionAnswersUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type UserProfileQuestionsCreateWithoutAnswerInput = {
    id?: string
    question_text: string
    question_type: $Enums.QuestionType
    is_required?: boolean
    step_number: number
    order_number?: number | null
    options?: QuestionOptionsCreateNestedManyWithoutQuestionInput
  }

  export type UserProfileQuestionsUncheckedCreateWithoutAnswerInput = {
    id?: string
    question_text: string
    question_type: $Enums.QuestionType
    is_required?: boolean
    step_number: number
    order_number?: number | null
    options?: QuestionOptionsUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type UserProfileQuestionsCreateOrConnectWithoutAnswerInput = {
    where: UserProfileQuestionsWhereUniqueInput
    create: XOR<UserProfileQuestionsCreateWithoutAnswerInput, UserProfileQuestionsUncheckedCreateWithoutAnswerInput>
  }

  export type SelectedAnswerOptionsCreateWithoutAnswerInput = {
    id?: string
    option_id: string
  }

  export type SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput = {
    id?: string
    option_id: string
  }

  export type SelectedAnswerOptionsCreateOrConnectWithoutAnswerInput = {
    where: SelectedAnswerOptionsWhereUniqueInput
    create: XOR<SelectedAnswerOptionsCreateWithoutAnswerInput, SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput>
  }

  export type SelectedAnswerOptionsCreateManyAnswerInputEnvelope = {
    data: SelectedAnswerOptionsCreateManyAnswerInput | SelectedAnswerOptionsCreateManyAnswerInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutUserProfileQuestionAnswersInput = {
    id?: string
    position?: string | null
    first_name?: string | null
    last_name?: string | null
    role?: $Enums.Roles
    is_email_verified?: boolean
    company?: string | null
    location?: string | null
    birth_date?: Date | string | null
    phone_number?: string | null
    skype?: string | null
    email?: string | null
    username?: string | null
    password: string
    fileName?: string | null
    level?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    MemberInvitations?: MemberInvitationsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutUserProfileQuestionAnswersInput = {
    id?: string
    position?: string | null
    first_name?: string | null
    last_name?: string | null
    role?: $Enums.Roles
    is_email_verified?: boolean
    company?: string | null
    location?: string | null
    birth_date?: Date | string | null
    phone_number?: string | null
    skype?: string | null
    email?: string | null
    username?: string | null
    password: string
    fileName?: string | null
    level?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    MemberInvitations?: MemberInvitationsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutUserProfileQuestionAnswersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserProfileQuestionAnswersInput, UserUncheckedCreateWithoutUserProfileQuestionAnswersInput>
  }

  export type UserProfileQuestionsUpsertWithoutAnswerInput = {
    update: XOR<UserProfileQuestionsUpdateWithoutAnswerInput, UserProfileQuestionsUncheckedUpdateWithoutAnswerInput>
    create: XOR<UserProfileQuestionsCreateWithoutAnswerInput, UserProfileQuestionsUncheckedCreateWithoutAnswerInput>
    where?: UserProfileQuestionsWhereInput
  }

  export type UserProfileQuestionsUpdateToOneWithWhereWithoutAnswerInput = {
    where?: UserProfileQuestionsWhereInput
    data: XOR<UserProfileQuestionsUpdateWithoutAnswerInput, UserProfileQuestionsUncheckedUpdateWithoutAnswerInput>
  }

  export type UserProfileQuestionsUpdateWithoutAnswerInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    is_required?: BoolFieldUpdateOperationsInput | boolean
    step_number?: IntFieldUpdateOperationsInput | number
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    options?: QuestionOptionsUpdateManyWithoutQuestionNestedInput
  }

  export type UserProfileQuestionsUncheckedUpdateWithoutAnswerInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    is_required?: BoolFieldUpdateOperationsInput | boolean
    step_number?: IntFieldUpdateOperationsInput | number
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
    options?: QuestionOptionsUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type SelectedAnswerOptionsUpsertWithWhereUniqueWithoutAnswerInput = {
    where: SelectedAnswerOptionsWhereUniqueInput
    update: XOR<SelectedAnswerOptionsUpdateWithoutAnswerInput, SelectedAnswerOptionsUncheckedUpdateWithoutAnswerInput>
    create: XOR<SelectedAnswerOptionsCreateWithoutAnswerInput, SelectedAnswerOptionsUncheckedCreateWithoutAnswerInput>
  }

  export type SelectedAnswerOptionsUpdateWithWhereUniqueWithoutAnswerInput = {
    where: SelectedAnswerOptionsWhereUniqueInput
    data: XOR<SelectedAnswerOptionsUpdateWithoutAnswerInput, SelectedAnswerOptionsUncheckedUpdateWithoutAnswerInput>
  }

  export type SelectedAnswerOptionsUpdateManyWithWhereWithoutAnswerInput = {
    where: SelectedAnswerOptionsScalarWhereInput
    data: XOR<SelectedAnswerOptionsUpdateManyMutationInput, SelectedAnswerOptionsUncheckedUpdateManyWithoutAnswerInput>
  }

  export type SelectedAnswerOptionsScalarWhereInput = {
    AND?: SelectedAnswerOptionsScalarWhereInput | SelectedAnswerOptionsScalarWhereInput[]
    OR?: SelectedAnswerOptionsScalarWhereInput[]
    NOT?: SelectedAnswerOptionsScalarWhereInput | SelectedAnswerOptionsScalarWhereInput[]
    id?: StringFilter<"SelectedAnswerOptions"> | string
    answer_id?: StringFilter<"SelectedAnswerOptions"> | string
    option_id?: StringFilter<"SelectedAnswerOptions"> | string
  }

  export type UserUpsertWithoutUserProfileQuestionAnswersInput = {
    update: XOR<UserUpdateWithoutUserProfileQuestionAnswersInput, UserUncheckedUpdateWithoutUserProfileQuestionAnswersInput>
    create: XOR<UserCreateWithoutUserProfileQuestionAnswersInput, UserUncheckedCreateWithoutUserProfileQuestionAnswersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserProfileQuestionAnswersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserProfileQuestionAnswersInput, UserUncheckedUpdateWithoutUserProfileQuestionAnswersInput>
  }

  export type UserUpdateWithoutUserProfileQuestionAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    skype?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    MemberInvitations?: MemberInvitationsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutUserProfileQuestionAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    birth_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    skype?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    MemberInvitations?: MemberInvitationsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserProfileQuestionAnswersCreateWithoutAnswer_optionsInput = {
    id?: string
    answer_text?: string | null
    question: UserProfileQuestionsCreateNestedOneWithoutAnswerInput
    user: UserCreateNestedOneWithoutUserProfileQuestionAnswersInput
  }

  export type UserProfileQuestionAnswersUncheckedCreateWithoutAnswer_optionsInput = {
    id?: string
    question_id: string
    answer_text?: string | null
    user_id: string
  }

  export type UserProfileQuestionAnswersCreateOrConnectWithoutAnswer_optionsInput = {
    where: UserProfileQuestionAnswersWhereUniqueInput
    create: XOR<UserProfileQuestionAnswersCreateWithoutAnswer_optionsInput, UserProfileQuestionAnswersUncheckedCreateWithoutAnswer_optionsInput>
  }

  export type UserProfileQuestionAnswersUpsertWithoutAnswer_optionsInput = {
    update: XOR<UserProfileQuestionAnswersUpdateWithoutAnswer_optionsInput, UserProfileQuestionAnswersUncheckedUpdateWithoutAnswer_optionsInput>
    create: XOR<UserProfileQuestionAnswersCreateWithoutAnswer_optionsInput, UserProfileQuestionAnswersUncheckedCreateWithoutAnswer_optionsInput>
    where?: UserProfileQuestionAnswersWhereInput
  }

  export type UserProfileQuestionAnswersUpdateToOneWithWhereWithoutAnswer_optionsInput = {
    where?: UserProfileQuestionAnswersWhereInput
    data: XOR<UserProfileQuestionAnswersUpdateWithoutAnswer_optionsInput, UserProfileQuestionAnswersUncheckedUpdateWithoutAnswer_optionsInput>
  }

  export type UserProfileQuestionAnswersUpdateWithoutAnswer_optionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    question?: UserProfileQuestionsUpdateOneRequiredWithoutAnswerNestedInput
    user?: UserUpdateOneRequiredWithoutUserProfileQuestionAnswersNestedInput
  }

  export type UserProfileQuestionAnswersUncheckedUpdateWithoutAnswer_optionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type MemberInvitationsCreateManyUsersInput = {
    id?: string
    email: string
    invitation_token: string
    status?: $Enums.Status
    expires_at: Date | string
    sent_at?: Date | string
    accepted_at?: Date | string | null
  }

  export type UserProfileQuestionAnswersCreateManyUserInput = {
    id?: string
    question_id: string
    answer_text?: string | null
  }

  export type MemberInvitationsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    invitation_token?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MemberInvitationsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    invitation_token?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MemberInvitationsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    invitation_token?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accepted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserProfileQuestionAnswersUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    question?: UserProfileQuestionsUpdateOneRequiredWithoutAnswerNestedInput
    answer_options?: SelectedAnswerOptionsUpdateManyWithoutAnswerNestedInput
  }

  export type UserProfileQuestionAnswersUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    answer_options?: SelectedAnswerOptionsUncheckedUpdateManyWithoutAnswerNestedInput
  }

  export type UserProfileQuestionAnswersUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionOptionsCreateManyQuestionInput = {
    id?: string
    option_text: string
    option_value: string
    order_number?: number | null
  }

  export type UserProfileQuestionAnswersCreateManyQuestionInput = {
    id?: string
    answer_text?: string | null
    user_id: string
  }

  export type QuestionOptionsUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_text?: StringFieldUpdateOperationsInput | string
    option_value?: StringFieldUpdateOperationsInput | string
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionOptionsUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_text?: StringFieldUpdateOperationsInput | string
    option_value?: StringFieldUpdateOperationsInput | string
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionOptionsUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_text?: StringFieldUpdateOperationsInput | string
    option_value?: StringFieldUpdateOperationsInput | string
    order_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserProfileQuestionAnswersUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    answer_options?: SelectedAnswerOptionsUpdateManyWithoutAnswerNestedInput
    user?: UserUpdateOneRequiredWithoutUserProfileQuestionAnswersNestedInput
  }

  export type UserProfileQuestionAnswersUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    answer_options?: SelectedAnswerOptionsUncheckedUpdateManyWithoutAnswerNestedInput
  }

  export type UserProfileQuestionAnswersUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedAnswerOptionsCreateManyAnswerInput = {
    id?: string
    option_id: string
  }

  export type SelectedAnswerOptionsUpdateWithoutAnswerInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_id?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedAnswerOptionsUncheckedUpdateWithoutAnswerInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_id?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedAnswerOptionsUncheckedUpdateManyWithoutAnswerInput = {
    id?: StringFieldUpdateOperationsInput | string
    option_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}